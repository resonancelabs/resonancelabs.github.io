(function() { const DEBUG = 1; (function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.cruntime = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
    "name": "rl-cruntime-browser",
    "version": "0.4.4",
    "main": "cruntime_browser.js",
    "devDependencies": {
        "http-server": "^0.7.5"
    }
}
},{}],2:[function(require,module,exports){
(function() {
var crouton_thrift = {};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof crouton_thrift === 'undefined') {
  crouton_thrift = {};
}
crouton_thrift.KeyValue = function(args) {
  this.Key = null;
  this.Value = null;
  if (args) {
    if (args.Key !== undefined) {
      this.Key = args.Key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Key is unset!');
    }
    if (args.Value !== undefined) {
      this.Value = args.Value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Value is unset!');
    }
  }
};
crouton_thrift.KeyValue.prototype = {};
crouton_thrift.KeyValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.KeyValue.prototype.write = function(output) {
  output.writeStructBegin('KeyValue');
  if (this.Key !== null && this.Key !== undefined) {
    output.writeFieldBegin('Key', Thrift.Type.STRING, 1);
    output.writeString(this.Key);
    output.writeFieldEnd();
  }
  if (this.Value !== null && this.Value !== undefined) {
    output.writeFieldBegin('Value', Thrift.Type.STRING, 2);
    output.writeString(this.Value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.NamedCounter = function(args) {
  this.Name = null;
  this.Value = null;
  if (args) {
    if (args.Name !== undefined) {
      this.Name = args.Name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Name is unset!');
    }
    if (args.Value !== undefined) {
      this.Value = args.Value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Value is unset!');
    }
  }
};
crouton_thrift.NamedCounter.prototype = {};
crouton_thrift.NamedCounter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.Value = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.NamedCounter.prototype.write = function(output) {
  output.writeStructBegin('NamedCounter');
  if (this.Name !== null && this.Name !== undefined) {
    output.writeFieldBegin('Name', Thrift.Type.STRING, 1);
    output.writeString(this.Name);
    output.writeFieldEnd();
  }
  if (this.Value !== null && this.Value !== undefined) {
    output.writeFieldBegin('Value', Thrift.Type.I64, 2);
    output.writeI64(this.Value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.Runtime = function(args) {
  this.guid = null;
  this.start_micros = null;
  this.group_name = null;
  this.attrs = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.start_micros !== undefined) {
      this.start_micros = args.start_micros;
    }
    if (args.group_name !== undefined) {
      this.group_name = args.group_name;
    }
    if (args.attrs !== undefined) {
      this.attrs = args.attrs;
    }
  }
};
crouton_thrift.Runtime.prototype = {};
crouton_thrift.Runtime.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.group_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.attrs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new crouton_thrift.KeyValue();
          elem6.read(input);
          this.attrs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.Runtime.prototype.write = function(output) {
  output.writeStructBegin('Runtime');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.start_micros !== null && this.start_micros !== undefined) {
    output.writeFieldBegin('start_micros', Thrift.Type.I64, 2);
    output.writeI64(this.start_micros);
    output.writeFieldEnd();
  }
  if (this.group_name !== null && this.group_name !== undefined) {
    output.writeFieldBegin('group_name', Thrift.Type.STRING, 3);
    output.writeString(this.group_name);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.attrs.length);
    for (var iter7 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(iter7))
      {
        iter7 = this.attrs[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.LogRecord = function(args) {
  this.timestamp_micros = null;
  this.runtime_guid = null;
  this.span_guid = null;
  this.stable_name = null;
  this.message = null;
  this.level = null;
  this.thread_id = null;
  this.filename = null;
  this.line_number = null;
  this.stack_frames = null;
  this.payload_json = null;
  this.error_flag = null;
  if (args) {
    if (args.timestamp_micros !== undefined) {
      this.timestamp_micros = args.timestamp_micros;
    }
    if (args.runtime_guid !== undefined) {
      this.runtime_guid = args.runtime_guid;
    }
    if (args.span_guid !== undefined) {
      this.span_guid = args.span_guid;
    }
    if (args.stable_name !== undefined) {
      this.stable_name = args.stable_name;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.thread_id !== undefined) {
      this.thread_id = args.thread_id;
    }
    if (args.filename !== undefined) {
      this.filename = args.filename;
    }
    if (args.line_number !== undefined) {
      this.line_number = args.line_number;
    }
    if (args.stack_frames !== undefined) {
      this.stack_frames = args.stack_frames;
    }
    if (args.payload_json !== undefined) {
      this.payload_json = args.payload_json;
    }
    if (args.error_flag !== undefined) {
      this.error_flag = args.error_flag;
    }
  }
};
crouton_thrift.LogRecord.prototype = {};
crouton_thrift.LogRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.runtime_guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.span_guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stable_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.level = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.thread_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.line_number = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.stack_frames = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString().value;
          this.stack_frames.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.payload_json = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.error_flag = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.LogRecord.prototype.write = function(output) {
  output.writeStructBegin('LogRecord');
  if (this.timestamp_micros !== null && this.timestamp_micros !== undefined) {
    output.writeFieldBegin('timestamp_micros', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp_micros);
    output.writeFieldEnd();
  }
  if (this.runtime_guid !== null && this.runtime_guid !== undefined) {
    output.writeFieldBegin('runtime_guid', Thrift.Type.STRING, 2);
    output.writeString(this.runtime_guid);
    output.writeFieldEnd();
  }
  if (this.span_guid !== null && this.span_guid !== undefined) {
    output.writeFieldBegin('span_guid', Thrift.Type.STRING, 3);
    output.writeString(this.span_guid);
    output.writeFieldEnd();
  }
  if (this.stable_name !== null && this.stable_name !== undefined) {
    output.writeFieldBegin('stable_name', Thrift.Type.STRING, 4);
    output.writeString(this.stable_name);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 5);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.STRING, 6);
    output.writeString(this.level);
    output.writeFieldEnd();
  }
  if (this.thread_id !== null && this.thread_id !== undefined) {
    output.writeFieldBegin('thread_id', Thrift.Type.I64, 7);
    output.writeI64(this.thread_id);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 8);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.line_number !== null && this.line_number !== undefined) {
    output.writeFieldBegin('line_number', Thrift.Type.I64, 9);
    output.writeI64(this.line_number);
    output.writeFieldEnd();
  }
  if (this.stack_frames !== null && this.stack_frames !== undefined) {
    output.writeFieldBegin('stack_frames', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.stack_frames.length);
    for (var iter15 in this.stack_frames)
    {
      if (this.stack_frames.hasOwnProperty(iter15))
      {
        iter15 = this.stack_frames[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.payload_json !== null && this.payload_json !== undefined) {
    output.writeFieldBegin('payload_json', Thrift.Type.STRING, 11);
    output.writeString(this.payload_json);
    output.writeFieldEnd();
  }
  if (this.error_flag !== null && this.error_flag !== undefined) {
    output.writeFieldBegin('error_flag', Thrift.Type.BOOL, 12);
    output.writeBool(this.error_flag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.TraceJoinId = function(args) {
  this.TraceKey = null;
  this.Value = null;
  if (args) {
    if (args.TraceKey !== undefined) {
      this.TraceKey = args.TraceKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field TraceKey is unset!');
    }
    if (args.Value !== undefined) {
      this.Value = args.Value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Value is unset!');
    }
  }
};
crouton_thrift.TraceJoinId.prototype = {};
crouton_thrift.TraceJoinId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.TraceKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.TraceJoinId.prototype.write = function(output) {
  output.writeStructBegin('TraceJoinId');
  if (this.TraceKey !== null && this.TraceKey !== undefined) {
    output.writeFieldBegin('TraceKey', Thrift.Type.STRING, 1);
    output.writeString(this.TraceKey);
    output.writeFieldEnd();
  }
  if (this.Value !== null && this.Value !== undefined) {
    output.writeFieldBegin('Value', Thrift.Type.STRING, 2);
    output.writeString(this.Value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.SpanRecord = function(args) {
  this.span_guid = null;
  this.runtime_guid = null;
  this.span_name = null;
  this.join_ids = null;
  this.oldest_micros = null;
  this.youngest_micros = null;
  this.attributes = null;
  this.error_flag = null;
  if (args) {
    if (args.span_guid !== undefined) {
      this.span_guid = args.span_guid;
    }
    if (args.runtime_guid !== undefined) {
      this.runtime_guid = args.runtime_guid;
    }
    if (args.span_name !== undefined) {
      this.span_name = args.span_name;
    }
    if (args.join_ids !== undefined) {
      this.join_ids = args.join_ids;
    }
    if (args.oldest_micros !== undefined) {
      this.oldest_micros = args.oldest_micros;
    }
    if (args.youngest_micros !== undefined) {
      this.youngest_micros = args.youngest_micros;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.error_flag !== undefined) {
      this.error_flag = args.error_flag;
    }
  }
};
crouton_thrift.SpanRecord.prototype = {};
crouton_thrift.SpanRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.span_guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.runtime_guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.span_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.join_ids = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new crouton_thrift.TraceJoinId();
          elem22.read(input);
          this.join_ids.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.oldest_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.youngest_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.attributes = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = new crouton_thrift.KeyValue();
          elem29.read(input);
          this.attributes.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.error_flag = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.SpanRecord.prototype.write = function(output) {
  output.writeStructBegin('SpanRecord');
  if (this.span_guid !== null && this.span_guid !== undefined) {
    output.writeFieldBegin('span_guid', Thrift.Type.STRING, 1);
    output.writeString(this.span_guid);
    output.writeFieldEnd();
  }
  if (this.runtime_guid !== null && this.runtime_guid !== undefined) {
    output.writeFieldBegin('runtime_guid', Thrift.Type.STRING, 2);
    output.writeString(this.runtime_guid);
    output.writeFieldEnd();
  }
  if (this.span_name !== null && this.span_name !== undefined) {
    output.writeFieldBegin('span_name', Thrift.Type.STRING, 3);
    output.writeString(this.span_name);
    output.writeFieldEnd();
  }
  if (this.join_ids !== null && this.join_ids !== undefined) {
    output.writeFieldBegin('join_ids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.join_ids.length);
    for (var iter30 in this.join_ids)
    {
      if (this.join_ids.hasOwnProperty(iter30))
      {
        iter30 = this.join_ids[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.oldest_micros !== null && this.oldest_micros !== undefined) {
    output.writeFieldBegin('oldest_micros', Thrift.Type.I64, 5);
    output.writeI64(this.oldest_micros);
    output.writeFieldEnd();
  }
  if (this.youngest_micros !== null && this.youngest_micros !== undefined) {
    output.writeFieldBegin('youngest_micros', Thrift.Type.I64, 6);
    output.writeI64(this.youngest_micros);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
    for (var iter31 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter31))
      {
        iter31 = this.attributes[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error_flag !== null && this.error_flag !== undefined) {
    output.writeFieldBegin('error_flag', Thrift.Type.BOOL, 9);
    output.writeBool(this.error_flag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.Auth = function(args) {
  this.access_token = null;
  if (args) {
    if (args.access_token !== undefined) {
      this.access_token = args.access_token;
    }
  }
};
crouton_thrift.Auth.prototype = {};
crouton_thrift.Auth.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.access_token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.Auth.prototype.write = function(output) {
  output.writeStructBegin('Auth');
  if (this.access_token !== null && this.access_token !== undefined) {
    output.writeFieldBegin('access_token', Thrift.Type.STRING, 1);
    output.writeString(this.access_token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.Timing = function(args) {
  this.receive_micros = null;
  this.transmit_micros = null;
  if (args) {
    if (args.receive_micros !== undefined) {
      this.receive_micros = args.receive_micros;
    }
    if (args.transmit_micros !== undefined) {
      this.transmit_micros = args.transmit_micros;
    }
  }
};
crouton_thrift.Timing.prototype = {};
crouton_thrift.Timing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.receive_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.transmit_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.Timing.prototype.write = function(output) {
  output.writeStructBegin('Timing');
  if (this.receive_micros !== null && this.receive_micros !== undefined) {
    output.writeFieldBegin('receive_micros', Thrift.Type.I64, 1);
    output.writeI64(this.receive_micros);
    output.writeFieldEnd();
  }
  if (this.transmit_micros !== null && this.transmit_micros !== undefined) {
    output.writeFieldBegin('transmit_micros', Thrift.Type.I64, 2);
    output.writeI64(this.transmit_micros);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.SampleCount = function(args) {
  this.oldest_micros = null;
  this.youngest_micros = null;
  this.count = null;
  if (args) {
    if (args.oldest_micros !== undefined) {
      this.oldest_micros = args.oldest_micros;
    }
    if (args.youngest_micros !== undefined) {
      this.youngest_micros = args.youngest_micros;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
crouton_thrift.SampleCount.prototype = {};
crouton_thrift.SampleCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.oldest_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.youngest_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.SampleCount.prototype.write = function(output) {
  output.writeStructBegin('SampleCount');
  if (this.oldest_micros !== null && this.oldest_micros !== undefined) {
    output.writeFieldBegin('oldest_micros', Thrift.Type.I64, 1);
    output.writeI64(this.oldest_micros);
    output.writeFieldEnd();
  }
  if (this.youngest_micros !== null && this.youngest_micros !== undefined) {
    output.writeFieldBegin('youngest_micros', Thrift.Type.I64, 2);
    output.writeI64(this.youngest_micros);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 3);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.ReportRequest = function(args) {
  this.runtime = null;
  this.span_records = null;
  this.log_records = null;
  this.timestamp_offset_micros = null;
  this.oldest_micros = null;
  this.youngest_micros = null;
  this.counters = null;
  if (args) {
    if (args.runtime !== undefined) {
      this.runtime = args.runtime;
    }
    if (args.span_records !== undefined) {
      this.span_records = args.span_records;
    }
    if (args.log_records !== undefined) {
      this.log_records = args.log_records;
    }
    if (args.timestamp_offset_micros !== undefined) {
      this.timestamp_offset_micros = args.timestamp_offset_micros;
    }
    if (args.oldest_micros !== undefined) {
      this.oldest_micros = args.oldest_micros;
    }
    if (args.youngest_micros !== undefined) {
      this.youngest_micros = args.youngest_micros;
    }
    if (args.counters !== undefined) {
      this.counters = args.counters;
    }
  }
};
crouton_thrift.ReportRequest.prototype = {};
crouton_thrift.ReportRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.runtime = new crouton_thrift.Runtime();
        this.runtime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.span_records = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new crouton_thrift.SpanRecord();
          elem38.read(input);
          this.span_records.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.log_records = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new crouton_thrift.LogRecord();
          elem45.read(input);
          this.log_records.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp_offset_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.oldest_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.youngest_micros = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.counters = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new crouton_thrift.NamedCounter();
          elem52.read(input);
          this.counters.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.ReportRequest.prototype.write = function(output) {
  output.writeStructBegin('ReportRequest');
  if (this.runtime !== null && this.runtime !== undefined) {
    output.writeFieldBegin('runtime', Thrift.Type.STRUCT, 1);
    this.runtime.write(output);
    output.writeFieldEnd();
  }
  if (this.span_records !== null && this.span_records !== undefined) {
    output.writeFieldBegin('span_records', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.span_records.length);
    for (var iter53 in this.span_records)
    {
      if (this.span_records.hasOwnProperty(iter53))
      {
        iter53 = this.span_records[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.log_records !== null && this.log_records !== undefined) {
    output.writeFieldBegin('log_records', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.log_records.length);
    for (var iter54 in this.log_records)
    {
      if (this.log_records.hasOwnProperty(iter54))
      {
        iter54 = this.log_records[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp_offset_micros !== null && this.timestamp_offset_micros !== undefined) {
    output.writeFieldBegin('timestamp_offset_micros', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp_offset_micros);
    output.writeFieldEnd();
  }
  if (this.oldest_micros !== null && this.oldest_micros !== undefined) {
    output.writeFieldBegin('oldest_micros', Thrift.Type.I64, 7);
    output.writeI64(this.oldest_micros);
    output.writeFieldEnd();
  }
  if (this.youngest_micros !== null && this.youngest_micros !== undefined) {
    output.writeFieldBegin('youngest_micros', Thrift.Type.I64, 8);
    output.writeI64(this.youngest_micros);
    output.writeFieldEnd();
  }
  if (this.counters !== null && this.counters !== undefined) {
    output.writeFieldBegin('counters', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.counters.length);
    for (var iter55 in this.counters)
    {
      if (this.counters.hasOwnProperty(iter55))
      {
        iter55 = this.counters[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.Command = function(args) {
  this.disable = null;
  if (args) {
    if (args.disable !== undefined) {
      this.disable = args.disable;
    }
  }
};
crouton_thrift.Command.prototype = {};
crouton_thrift.Command.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.disable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.Command.prototype.write = function(output) {
  output.writeStructBegin('Command');
  if (this.disable !== null && this.disable !== undefined) {
    output.writeFieldBegin('disable', Thrift.Type.BOOL, 1);
    output.writeBool(this.disable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.ReportResponse = function(args) {
  this.commands = null;
  this.timing = null;
  this.errors = null;
  if (args) {
    if (args.commands !== undefined) {
      this.commands = args.commands;
    }
    if (args.timing !== undefined) {
      this.timing = args.timing;
    }
    if (args.errors !== undefined) {
      this.errors = args.errors;
    }
  }
};
crouton_thrift.ReportResponse.prototype = {};
crouton_thrift.ReportResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.commands = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new crouton_thrift.Command();
          elem62.read(input);
          this.commands.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.timing = new crouton_thrift.Timing();
        this.timing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.errors = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = input.readString().value;
          this.errors.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.ReportResponse.prototype.write = function(output) {
  output.writeStructBegin('ReportResponse');
  if (this.commands !== null && this.commands !== undefined) {
    output.writeFieldBegin('commands', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.commands.length);
    for (var iter70 in this.commands)
    {
      if (this.commands.hasOwnProperty(iter70))
      {
        iter70 = this.commands[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timing !== null && this.timing !== undefined) {
    output.writeFieldBegin('timing', Thrift.Type.STRUCT, 2);
    this.timing.write(output);
    output.writeFieldEnd();
  }
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.errors.length);
    for (var iter71 in this.errors)
    {
      if (this.errors.hasOwnProperty(iter71))
      {
        iter71 = this.errors[iter71];
        output.writeString(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

crouton_thrift.ReportingService_Report_args = function(args) {
  this.auth = null;
  this.request = null;
  if (args) {
    if (args.auth !== undefined) {
      this.auth = args.auth;
    }
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
crouton_thrift.ReportingService_Report_args.prototype = {};
crouton_thrift.ReportingService_Report_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new crouton_thrift.Auth();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new crouton_thrift.ReportRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.ReportingService_Report_args.prototype.write = function(output) {
  output.writeStructBegin('ReportingService_Report_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.ReportingService_Report_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
crouton_thrift.ReportingService_Report_result.prototype = {};
crouton_thrift.ReportingService_Report_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new crouton_thrift.ReportResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.ReportingService_Report_result.prototype.write = function(output) {
  output.writeStructBegin('ReportingService_Report_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.ReportingServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
crouton_thrift.ReportingServiceClient.prototype = {};
crouton_thrift.ReportingServiceClient.prototype.Report = function(auth, request, callback) {
  this.send_Report(auth, request, callback); 
  if (!callback) {
    return this.recv_Report();
  }
};

crouton_thrift.ReportingServiceClient.prototype.send_Report = function(auth, request, callback) {
  this.output.writeMessageBegin('Report', Thrift.MessageType.CALL, this.seqid);
  var args = new crouton_thrift.ReportingService_Report_args();
  args.auth = auth;
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_Report();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

crouton_thrift.ReportingServiceClient.prototype.recv_Report = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new crouton_thrift.ReportingService_Report_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'Report failed: unknown result';
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*jshint evil:true*/

/**
 * The Thrift namespace houses the Apache Thrift JavaScript library 
 * elements providing JavaScript bindings for the Apache Thrift RPC 
 * system. End users will typically only directly make use of the 
 * Transport (TXHRTransport/TWebSocketTransport) and Protocol 
 * (TJSONPRotocol/TBinaryProtocol) constructors.
 * 
 * Object methods beginning with a __ (e.g. __onOpen()) are internal 
 * and should not be called outside of the object's own methods.
 * 
 * This library creates one global object: Thrift
 * Code in this library must never create additional global identifiers,
 * all features must be scoped within the Thrift namespace.
 * @namespace
 * @example
 *     var transport = new Thrift.Transport("http://localhost:8585");
 *     var protocol  = new Thrift.Protocol(transport);
 *     var client = new MyThriftSvcClient(protocol);
 *     var result = client.MyMethod();
 */
var Thrift = {
    /**
     * Thrift JavaScript library version.
     * @readonly
     * @const {string} Version
     * @memberof Thrift
     */
    Version: '1.0.0-dev',

    /**
     * Thrift IDL type string to Id mapping.
     * @readonly
     * @property {number}  STOP   - End of a set of fields.
     * @property {number}  VOID   - No value (only legal for return types).
     * @property {number}  BOOL   - True/False integer.
     * @property {number}  BYTE   - Signed 8 bit integer.
     * @property {number}  I08    - Signed 8 bit integer.     
     * @property {number}  DOUBLE - 64 bit IEEE 854 floating point.
     * @property {number}  I16    - Signed 16 bit integer.
     * @property {number}  I32    - Signed 32 bit integer.
     * @property {number}  I64    - Signed 64 bit integer.
     * @property {number}  STRING - Array of bytes representing a string of characters.
     * @property {number}  UTF7   - Array of bytes representing a string of UTF7 encoded characters.
     * @property {number}  STRUCT - A multifield type.
     * @property {number}  MAP    - A collection type (map/associative-array/dictionary).
     * @property {number}  SET    - A collection type (unordered and without repeated values).
     * @property {number}  LIST   - A collection type (unordered).
     * @property {number}  UTF8   - Array of bytes representing a string of UTF8 encoded characters.
     * @property {number}  UTF16  - Array of bytes representing a string of UTF16 encoded characters.
     */
    Type: {
        'STOP' : 0,
        'VOID' : 1,
        'BOOL' : 2,
        'BYTE' : 3,
        'I08' : 3,
        'DOUBLE' : 4,
        'I16' : 6,
        'I32' : 8,
        'I64' : 10,
        'STRING' : 11,
        'UTF7' : 11,
        'STRUCT' : 12,
        'MAP' : 13,
        'SET' : 14,
        'LIST' : 15,
        'UTF8' : 16,
        'UTF16' : 17
    },

    /**
     * Thrift RPC message type string to Id mapping.
     * @readonly
     * @property {number}  CALL      - RPC call sent from client to server.
     * @property {number}  REPLY     - RPC call normal response from server to client.
     * @property {number}  EXCEPTION - RPC call exception response from server to client.
     * @property {number}  ONEWAY    - Oneway RPC call from client to server with no response.
     */
    MessageType: {
        'CALL' : 1,
        'REPLY' : 2,
        'EXCEPTION' : 3,
        'ONEWAY' : 4
    },

    /**
     * Utility function returning the count of an object's own properties.
     * @param {object} obj - Object to test.
     * @returns {number} number of object's own properties
     */
    objectLength: function(obj) {
        var length = 0;
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                length++;
            }
        }
        return length;
    },

    /**
     * Utility function to establish prototype inheritance.
     * @see {@link http://javascript.crockford.com/prototypal.html|Prototypal Inheritance}
     * @param {function} constructor - Contstructor function to set as derived.
     * @param {function} superConstructor - Contstructor function to set as base.
     * @param {string} [name] - Type name to set as name property in derived prototype.
     */
    inherits: function(constructor, superConstructor, name) {
      function F() {}
      F.prototype = superConstructor.prototype;
      constructor.prototype = new F();
      constructor.prototype.name = name || "";
    }
};

/**
 * Initializes a Thrift TException instance.
 * @constructor
 * @augments Error
 * @param {string} message - The TException message (distinct from the Error message).
 * @classdesc TException is the base class for all Thrift exceptions types.
 */
Thrift.TException = function(message) {
    this.message = message;
};
Thrift.inherits(Thrift.TException, Error, 'TException');

/**
 * Returns the message set on the exception.
 * @readonly
 * @returns {string} exception message
 */
Thrift.TException.prototype.getMessage = function() {
    return this.message;
};

/**
 * Thrift Application Exception type string to Id mapping.
 * @readonly
 * @property {number}  UNKNOWN                 - Unknown/undefined.
 * @property {number}  UNKNOWN_METHOD          - Client attempted to call a method unknown to the server.
 * @property {number}  INVALID_MESSAGE_TYPE    - Client passed an unknown/unsupported MessageType.
 * @property {number}  WRONG_METHOD_NAME       - Unused.
 * @property {number}  BAD_SEQUENCE_ID         - Unused in Thrift RPC, used to flag proprietary sequence number errors.
 * @property {number}  MISSING_RESULT          - Raised by a server processor if a handler fails to supply the required return result.
 * @property {number}  INTERNAL_ERROR          - Something bad happened.
 * @property {number}  PROTOCOL_ERROR          - The protocol layer failed to serialize or deserialize data.
 * @property {number}  INVALID_TRANSFORM       - Unused.
 * @property {number}  INVALID_PROTOCOL        - The protocol (or version) is not supported.
 * @property {number}  UNSUPPORTED_CLIENT_TYPE - Unused.
 */
Thrift.TApplicationExceptionType = {
    'UNKNOWN' : 0,
    'UNKNOWN_METHOD' : 1,
    'INVALID_MESSAGE_TYPE' : 2,
    'WRONG_METHOD_NAME' : 3,
    'BAD_SEQUENCE_ID' : 4,
    'MISSING_RESULT' : 5,
    'INTERNAL_ERROR' : 6,
    'PROTOCOL_ERROR' : 7,
    'INVALID_TRANSFORM' : 8,
    'INVALID_PROTOCOL' : 9,
    'UNSUPPORTED_CLIENT_TYPE' : 10
};

/**
 * Initializes a Thrift TApplicationException instance.
 * @constructor
 * @augments Thrift.TException
 * @param {string} message - The TApplicationException message (distinct from the Error message).
 * @param {Thrift.TApplicationExceptionType} [code] - The TApplicationExceptionType code.
 * @classdesc TApplicationException is the exception class used to propagate exceptions from an RPC server back to a calling client.
*/
Thrift.TApplicationException = function(message, code) {
    this.message = message;
    this.code = typeof code === "number" ? code : 0;
};
Thrift.inherits(Thrift.TApplicationException, Thrift.TException, 'TApplicationException');

/**
 * Read a TApplicationException from the supplied protocol.
 * @param {object} input - The input protocol to read from.
 */
Thrift.TApplicationException.prototype.read = function(input) {
    while (1) {
        var ret = input.readFieldBegin();

        if (ret.ftype == Thrift.Type.STOP) {
            break;
        }

        var fid = ret.fid;

        switch (fid) {
            case 1:
                if (ret.ftype == Thrift.Type.STRING) {
                    ret = input.readString();
                    this.message = ret.value;
                } else {
                    ret = input.skip(ret.ftype);
                }
                break;
            case 2:
                if (ret.ftype == Thrift.Type.I32) {
                    ret = input.readI32();
                    this.code = ret.value;
                } else {
                    ret = input.skip(ret.ftype);
                }
                break;
           default:
                ret = input.skip(ret.ftype);
                break;
        }

        input.readFieldEnd();
    }

    input.readStructEnd();
};

/**
 * Wite a TApplicationException to the supplied protocol.
 * @param {object} output - The output protocol to write to.
 */
Thrift.TApplicationException.prototype.write = function(output) {
    output.writeStructBegin('TApplicationException');

    if (this.message) {
        output.writeFieldBegin('message', Thrift.Type.STRING, 1);
        output.writeString(this.getMessage());
        output.writeFieldEnd();
    }

    if (this.code) {
        output.writeFieldBegin('type', Thrift.Type.I32, 2);
        output.writeI32(this.code);
        output.writeFieldEnd();
    }

    output.writeFieldStop();
    output.writeStructEnd();
};

/**
 * Returns the application exception code set on the exception.
 * @readonly
 * @returns {Thrift.TApplicationExceptionType} exception code
 */
Thrift.TApplicationException.prototype.getCode = function() {
    return this.code;
};

/**
 * Constructor Function for the XHR transport.
 * If you do not specify a url then you must handle XHR operations on
 * your own. This type can also be constructed using the Transport alias
 * for backward compatibility.
 * @constructor
 * @param {string} [url] - The URL to connect to.
 * @classdesc The Apache Thrift Transport layer performs byte level I/O 
 * between RPC clients and servers. The JavaScript TXHRTransport object 
 * uses Http[s]/XHR. Target servers must implement the http[s] transport
 * (see: node.js example server_http.js).
 * @example
 *     var transport = new Thrift.TXHRTransport("http://localhost:8585");
 */
Thrift.Transport = Thrift.TXHRTransport = function(url, options) {
    this.url = url;
    this.wpos = 0;
    this.rpos = 0;
    this.useCORS = (options && options.useCORS);
    this.send_buf = '';
    this.recv_buf = '';
};

Thrift.TXHRTransport.prototype = {
    /**
     * Gets the browser specific XmlHttpRequest Object.
     * @returns {object} the browser XHR interface object
     */
    getXmlHttpRequestObject: function() {
        try { return new XMLHttpRequest(); } catch (e1) { }
        try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch (e2) { }
        try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch (e3) { }

        throw "Your browser doesn't support XHR.";
    },

    /**
     * Sends the current XRH request if the transport was created with a URL 
     * and the async parameter is false. If the transport was not created with
     * a URL, or the async parameter is True and no callback is provided, or 
     * the URL is an empty string, the current send buffer is returned.
     * @param {object} async - If true the current send buffer is returned.
     * @param {object} callback - Optional async completion callback 
     * @returns {undefined|string} Nothing or the current send buffer.
     * @throws {string} If XHR fails.
     */
    flush: function(async, callback) {
        var self = this;
        if ((async && !callback) || this.url === undefined || this.url === '') {
            return this.send_buf;
        }

        var xreq = this.getXmlHttpRequestObject();

        if (xreq.overrideMimeType) {
            xreq.overrideMimeType('application/json');
        }

        if (callback) {
            //Ignore XHR callbacks until the data arrives, then call the
            //  client's callback
            xreq.onreadystatechange = 
              (function() {
                var clientCallback = callback;    
                return function() {
                  if (this.readyState == 4 && this.status == 200) {
                    self.setRecvBuffer(this.responseText);
                    clientCallback();
                  }
                };
              }());
        }

        xreq.open('POST', this.url, !!async);
        xreq.send(this.send_buf);
        if (async && callback) {
            return;
        }

        if (xreq.readyState != 4) {
            throw 'encountered an unknown ajax ready state: ' + xreq.readyState;
        }

        if (xreq.status != 200) {
            throw 'encountered a unknown request status: ' + xreq.status;
        }

        this.recv_buf = xreq.responseText;
        this.recv_buf_sz = this.recv_buf.length;
        this.wpos = this.recv_buf.length;
        this.rpos = 0;
    },

    /**
     * Creates a jQuery XHR object to be used for a Thrift server call.
     * @param {object} client - The Thrift Service client object generated by the IDL compiler.
     * @param {object} postData - The message to send to the server.
     * @param {function} args - The original call arguments with the success call back at the end.
     * @param {function} recv_method - The Thrift Service Client receive method for the call.
     * @returns {object} A new jQuery XHR object.
     * @throws {string} If the jQuery version is prior to 1.5 or if jQuery is not found.
     */
    jqRequest: function(client, postData, args, recv_method) {
        if (typeof jQuery === 'undefined' ||
            typeof jQuery.Deferred === 'undefined') {
            throw 'Thrift.js requires jQuery 1.5+ to use asynchronous requests';
        }

        var thriftTransport = this;

        var jqXHR = jQuery.ajax({
            url: this.url,
            data: postData,
            type: 'POST',
            cache: false,
            contentType: 'application/json',
            dataType: 'text thrift',
            converters: {
                'text thrift' : function(responseData) {
                    thriftTransport.setRecvBuffer(responseData);
                    var value = recv_method.call(client);
                    return value;
                }
            },
            context: client,
            success: jQuery.makeArray(args).pop()
        });

        return jqXHR;
    },

    /**
     * Sets the buffer to provide the protocol when deserializing.
     * @param {string} buf - The buffer to supply the protocol.
     */
    setRecvBuffer: function(buf) {
        this.recv_buf = buf;
        this.recv_buf_sz = this.recv_buf.length;
        this.wpos = this.recv_buf.length;
        this.rpos = 0;
    },

    /**
     * Returns true if the transport is open, XHR always returns true.
     * @readonly
     * @returns {boolean} Always True.
     */    
    isOpen: function() {
        return true;
    },

    /**
     * Opens the transport connection, with XHR this is a nop.
     */    
    open: function() {},

    /**
     * Closes the transport connection, with XHR this is a nop.
     */    
    close: function() {},

    /**
     * Returns the specified number of characters from the response
     * buffer.
     * @param {number} len - The number of characters to return.
     * @returns {string} Characters sent by the server.
     */
    read: function(len) {
        var avail = this.wpos - this.rpos;

        if (avail === 0) {
            return '';
        }

        var give = len;

        if (avail < len) {
            give = avail;
        }

        var ret = this.read_buf.substr(this.rpos, give);
        this.rpos += give;

        //clear buf when complete?
        return ret;
    },

    /**
     * Returns the entire response buffer.
     * @returns {string} Characters sent by the server.
     */
    readAll: function() {
        return this.recv_buf;
    },

    /**
     * Sets the send buffer to buf.
     * @param {string} buf - The buffer to send.
     */    
    write: function(buf) {
        this.send_buf = buf;
    },

    /**
     * Returns the send buffer.
     * @readonly
     * @returns {string} The send buffer.
     */ 
    getSendBuffer: function() {
        return this.send_buf;
    }

};


/**
 * Constructor Function for the WebSocket transport.
 * @constructor
 * @param {string} [url] - The URL to connect to.
 * @classdesc The Apache Thrift Transport layer performs byte level I/O 
 * between RPC clients and servers. The JavaScript TWebSocketTransport object 
 * uses the WebSocket protocol. Target servers must implement WebSocket.
 * (see: node.js example server_http.js).
 * @example
 *   var transport = new Thrift.TWebSocketTransport("http://localhost:8585");
 */
Thrift.TWebSocketTransport = function(url) {
    this.__reset(url);
};

Thrift.TWebSocketTransport.prototype = {
    __reset: function(url) {
      this.url = url;             //Where to connect
      this.socket = null;         //The web socket
      this.callbacks = [];        //Pending callbacks
      this.send_pending = [];     //Buffers/Callback pairs waiting to be sent
      this.send_buf = '';         //Outbound data, immutable until sent
      this.recv_buf = '';         //Inbound data
      this.rb_wpos = 0;           //Network write position in receive buffer
      this.rb_rpos = 0;           //Client read position in receive buffer
    },

    /**
     * Sends the current WS request and registers callback. The async 
     * parameter is ignored (WS flush is always async) and the callback 
     * function parameter is required.
     * @param {object} async - Ignored.
     * @param {object} callback - The client completion callback.
     * @returns {undefined|string} Nothing (undefined) 
     */
    flush: function(async, callback) {
      var self = this;
      if (this.isOpen()) {
        //Send data and register a callback to invoke the client callback
        this.socket.send(this.send_buf); 
        this.callbacks.push((function() {
          var clientCallback = callback;    
          return function(msg) {
            self.setRecvBuffer(msg);
            clientCallback();
          };
        }()));
      } else {
        //Queue the send to go out __onOpen
        this.send_pending.push({
          buf: this.send_buf,
          cb:  callback
        });
      }
    },

    __onOpen: function() { 
       var self = this;
       if (this.send_pending.length > 0) {
          //If the user made calls before the connection was fully 
          //open, send them now
          this.send_pending.forEach(function(elem) {
             this.socket.send(elem.buf);
             this.callbacks.push((function() {
               var clientCallback = elem.cb;    
               return function(msg) {
                  self.setRecvBuffer(msg);
                  clientCallback();
               };
             }()));
          });
          this.send_pending = [];
       }
    },
    
    __onClose: function(evt) { 
      this.__reset(this.url);
    },
     
    __onMessage: function(evt) {
      if (this.callbacks.length) {
        this.callbacks.shift()(evt.data);
      }
    },
     
    __onError: function(evt) { 
      console.log("Thrift WebSocket Error: " + evt.toString());
      this.socket.close();
    },

    /**
     * Sets the buffer to use when receiving server responses.
     * @param {string} buf - The buffer to receive server responses.
     */
    setRecvBuffer: function(buf) {
        this.recv_buf = buf;
        this.recv_buf_sz = this.recv_buf.length;
        this.wpos = this.recv_buf.length;
        this.rpos = 0;
    },

    /**
     * Returns true if the transport is open
     * @readonly
     * @returns {boolean} 
     */    
    isOpen: function() {
        return this.socket && this.socket.readyState == this.socket.OPEN;
    },

    /**
     * Opens the transport connection
     */    
    open: function() {
      //If OPEN/CONNECTING/CLOSING ignore additional opens
      if (this.socket && this.socket.readyState != this.socket.CLOSED) {
        return;
      }
      //If there is no socket or the socket is closed:
      this.socket = new WebSocket(this.url);
      this.socket.onopen = this.__onOpen.bind(this); 
      this.socket.onmessage = this.__onMessage.bind(this); 
      this.socket.onerror = this.__onError.bind(this); 
      this.socket.onclose = this.__onClose.bind(this); 
    },

    /**
     * Closes the transport connection
     */    
    close: function() {
      this.socket.close();
    },

    /**
     * Returns the specified number of characters from the response
     * buffer.
     * @param {number} len - The number of characters to return.
     * @returns {string} Characters sent by the server.
     */
    read: function(len) {
        var avail = this.wpos - this.rpos;

        if (avail === 0) {
            return '';
        }

        var give = len;

        if (avail < len) {
            give = avail;
        }

        var ret = this.read_buf.substr(this.rpos, give);
        this.rpos += give;

        //clear buf when complete?
        return ret;
    },

    /**
     * Returns the entire response buffer.
     * @returns {string} Characters sent by the server.
     */
    readAll: function() {
        return this.recv_buf;
    },

    /**
     * Sets the send buffer to buf.
     * @param {string} buf - The buffer to send.
     */    
    write: function(buf) {
        this.send_buf = buf;
    },

    /**
     * Returns the send buffer.
     * @readonly
     * @returns {string} The send buffer.
     */ 
    getSendBuffer: function() {
        return this.send_buf;
    }

};

/**
 * Initializes a Thrift JSON protocol instance.
 * @constructor
 * @param {Thrift.Transport} transport - The transport to serialize to/from.
 * @classdesc Apache Thrift Protocols perform serialization which enables cross 
 * language RPC. The Protocol type is the JavaScript browser implementation 
 * of the Apache Thrift TJSONProtocol.
 * @example
 *     var protocol  = new Thrift.Protocol(transport);
 */
Thrift.TJSONProtocol = Thrift.Protocol = function(transport) {
    this.tstack = [];
    this.tpos = [];
    this.transport = transport;
};

/**
 * Thrift IDL type Id to string mapping.
 * @readonly
 * @see {@link Thrift.Type}
 */
Thrift.Protocol.Type = {};
Thrift.Protocol.Type[Thrift.Type.BOOL] = '"tf"';
Thrift.Protocol.Type[Thrift.Type.BYTE] = '"i8"';
Thrift.Protocol.Type[Thrift.Type.I16] = '"i16"';
Thrift.Protocol.Type[Thrift.Type.I32] = '"i32"';
Thrift.Protocol.Type[Thrift.Type.I64] = '"i64"';
Thrift.Protocol.Type[Thrift.Type.DOUBLE] = '"dbl"';
Thrift.Protocol.Type[Thrift.Type.STRUCT] = '"rec"';
Thrift.Protocol.Type[Thrift.Type.STRING] = '"str"';
Thrift.Protocol.Type[Thrift.Type.MAP] = '"map"';
Thrift.Protocol.Type[Thrift.Type.LIST] = '"lst"';
Thrift.Protocol.Type[Thrift.Type.SET] = '"set"';

/**
 * Thrift IDL type string to Id mapping.
 * @readonly
 * @see {@link Thrift.Type}
 */
Thrift.Protocol.RType = {};
Thrift.Protocol.RType.tf = Thrift.Type.BOOL;
Thrift.Protocol.RType.i8 = Thrift.Type.BYTE;
Thrift.Protocol.RType.i16 = Thrift.Type.I16;
Thrift.Protocol.RType.i32 = Thrift.Type.I32;
Thrift.Protocol.RType.i64 = Thrift.Type.I64;
Thrift.Protocol.RType.dbl = Thrift.Type.DOUBLE;
Thrift.Protocol.RType.rec = Thrift.Type.STRUCT;
Thrift.Protocol.RType.str = Thrift.Type.STRING;
Thrift.Protocol.RType.map = Thrift.Type.MAP;
Thrift.Protocol.RType.lst = Thrift.Type.LIST;
Thrift.Protocol.RType.set = Thrift.Type.SET;

/**
 * The TJSONProtocol version number.
 * @readonly
 * @const {number} Version
 * @memberof Thrift.Protocol
 */
 Thrift.Protocol.Version = 1;

Thrift.Protocol.prototype = {
    /**
     * Returns the underlying transport.
     * @readonly
     * @returns {Thrift.Transport} The underlying transport.
     */ 
    getTransport: function() {
        return this.transport;
    },

    /**
     * Serializes the beginning of a Thrift RPC message.
     * @param {string} name - The service method to call.
     * @param {Thrift.MessageType} messageType - The type of method call.
     * @param {number} seqid - The sequence number of this call (always 0 in Apache Thrift).
     */
    writeMessageBegin: function(name, messageType, seqid) {
        this.tstack = [];
        this.tpos = [];

        this.tstack.push([Thrift.Protocol.Version, '"' +
            name + '"', messageType, seqid]);
    },

    /**
     * Serializes the end of a Thrift RPC message.
     */
    writeMessageEnd: function() {
        var obj = this.tstack.pop();

        this.wobj = this.tstack.pop();
        this.wobj.push(obj);

        this.wbuf = '[' + this.wobj.join(',') + ']';

        this.transport.write(this.wbuf);
     },


    /**
     * Serializes the beginning of a struct.
     * @param {string} name - The name of the struct.
     */
    writeStructBegin: function(name) {
        this.tpos.push(this.tstack.length);
        this.tstack.push({});
    },

    /**
     * Serializes the end of a struct.
     */
    writeStructEnd: function() {

        var p = this.tpos.pop();
        var struct = this.tstack[p];
        var str = '{';
        var first = true;
        for (var key in struct) {
            if (first) {
                first = false;
            } else {
                str += ',';
            }

            str += key + ':' + struct[key];
        }

        str += '}';
        this.tstack[p] = str;
    },

    /**
     * Serializes the beginning of a struct field.
     * @param {string} name - The name of the field.
     * @param {Thrift.Protocol.Type} fieldType - The data type of the field.
     * @param {number} fieldId - The field's unique identifier.
     */
    writeFieldBegin: function(name, fieldType, fieldId) {
        this.tpos.push(this.tstack.length);
        this.tstack.push({ 'fieldId': '"' +
            fieldId + '"', 'fieldType': Thrift.Protocol.Type[fieldType]
        });

    },

    /**
     * Serializes the end of a field.
     */
    writeFieldEnd: function() {
        var value = this.tstack.pop();
        var fieldInfo = this.tstack.pop();

        this.tstack[this.tstack.length - 1][fieldInfo.fieldId] = '{' +
            fieldInfo.fieldType + ':' + value + '}';
        this.tpos.pop();
    },

    /**
     * Serializes the end of the set of fields for a struct.
     */
    writeFieldStop: function() {
        //na
    },

    /**
     * Serializes the beginning of a map collection.
     * @param {Thrift.Type} keyType - The data type of the key.
     * @param {Thrift.Type} valType - The data type of the value.
     * @param {number} [size] - The number of elements in the map (ignored).
     */
    writeMapBegin: function(keyType, valType, size) {
        this.tpos.push(this.tstack.length);
        this.tstack.push([Thrift.Protocol.Type[keyType],
            Thrift.Protocol.Type[valType], 0]);
    },

    /**
     * Serializes the end of a map.
     */
    writeMapEnd: function() {
        var p = this.tpos.pop();

        if (p == this.tstack.length) {
            return;
        }

        if ((this.tstack.length - p - 1) % 2 !== 0) {
            this.tstack.push('');
        }

        var size = (this.tstack.length - p - 1) / 2;

        this.tstack[p][this.tstack[p].length - 1] = size;

        var map = '}';
        var first = true;
        while (this.tstack.length > p + 1) {
            var v = this.tstack.pop();
            var k = this.tstack.pop();
            if (first) {
                first = false;
            } else {
                map = ',' + map;
            }

            if (! isNaN(k)) { k = '"' + k + '"'; } //json "keys" need to be strings
            map = k + ':' + v + map;
        }
        map = '{' + map;

        this.tstack[p].push(map);
        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';
    },

    /**
     * Serializes the beginning of a list collection.
     * @param {Thrift.Type} elemType - The data type of the elements.
     * @param {number} size - The number of elements in the list.
     */
    writeListBegin: function(elemType, size) {
        this.tpos.push(this.tstack.length);
        this.tstack.push([Thrift.Protocol.Type[elemType], size]);
    },

    /**
     * Serializes the end of a list.
     */
    writeListEnd: function() {
        var p = this.tpos.pop();

        while (this.tstack.length > p + 1) {
            var tmpVal = this.tstack[p + 1];
            this.tstack.splice(p + 1, 1);
            this.tstack[p].push(tmpVal);
        }

        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';
    },

    /**
     * Serializes the beginning of a set collection.
     * @param {Thrift.Type} elemType - The data type of the elements.
     * @param {number} size - The number of elements in the list.
     */
    writeSetBegin: function(elemType, size) {
        this.tpos.push(this.tstack.length);
        this.tstack.push([Thrift.Protocol.Type[elemType], size]);
    },

    /**
     * Serializes the end of a set.
     */
    writeSetEnd: function() {
        var p = this.tpos.pop();

        while (this.tstack.length > p + 1) {
            var tmpVal = this.tstack[p + 1];
            this.tstack.splice(p + 1, 1);
            this.tstack[p].push(tmpVal);
        }

        this.tstack[p] = '[' + this.tstack[p].join(',') + ']';
    },

    /** Serializes a boolean */
    writeBool: function(value) {
        this.tstack.push(value ? 1 : 0);
    },

    /** Serializes a number */
    writeByte: function(i8) {
        this.tstack.push(i8);
    },

    /** Serializes a number */
    writeI16: function(i16) {
        this.tstack.push(i16);
    },

    /** Serializes a number */
    writeI32: function(i32) {
        this.tstack.push(i32);
    },

    /** Serializes a number */
    writeI64: function(i64) {
        this.tstack.push(i64);
    },

    /** Serializes a number */
    writeDouble: function(dbl) {
        this.tstack.push(dbl);
    },

    /** Serializes a string */
    writeString: function(str) {
        // We do not encode uri components for wire transfer:
        if (str === null) {
            this.tstack.push(null);
        } else {
            // concat may be slower than building a byte buffer
            var escapedString = '';
            for (var i = 0; i < str.length; i++) {
                var ch = str.charAt(i);      // a single double quote: "
                if (ch === '\"') {
                    escapedString += '\\\"'; // write out as: \"
                } else if (ch === '\\') {    // a single backslash
                    escapedString += '\\\\'; // write out as double backslash 
                } else if (ch === '\b') {    // a single backspace: invisible
                    escapedString += '\\b';  // write out as: \b"
                } else if (ch === '\f') {    // a single formfeed: invisible
                    escapedString += '\\f';  // write out as: \f"
                } else if (ch === '\n') {    // a single newline: invisible
                    escapedString += '\\n';  // write out as: \n"
                } else if (ch === '\r') {    // a single return: invisible
                    escapedString += '\\r';  // write out as: \r"
                } else if (ch === '\t') {    // a single tab: invisible
                    escapedString += '\\t';  // write out as: \t"
                } else {
                    escapedString += ch;     // Else it need not be escaped
                }
            }
            this.tstack.push('"' + escapedString + '"');
        }
    },

    /** Serializes a string */
    writeBinary: function(str) {
        this.writeString(str);
    },

    /**
       @class
       @name AnonReadMessageBeginReturn
       @property {string} fname - The name of the service method.
       @property {Thrift.MessageType} mtype - The type of message call.
       @property {number} rseqid - The sequence number of the message (0 in Thrift RPC).
     */
    /** 
     * Deserializes the beginning of a message. 
     * @returns {AnonReadMessageBeginReturn}
     */
    readMessageBegin: function() {
        this.rstack = [];
        this.rpos = [];

        if (typeof JSON !== 'undefined' && typeof JSON.parse === 'function') {
            this.robj = JSON.parse(this.transport.readAll());
        } else if (typeof jQuery !== 'undefined') {
            this.robj = jQuery.parseJSON(this.transport.readAll());
        } else {
            this.robj = eval(this.transport.readAll());
        }

        var r = {};
        var version = this.robj.shift();

        if (version != Thrift.Protocol.Version) {
            throw 'Wrong thrift protocol version: ' + version;
        }

        r.fname = this.robj.shift();
        r.mtype = this.robj.shift();
        r.rseqid = this.robj.shift();


        //get to the main obj
        this.rstack.push(this.robj.shift());

        return r;
    },

    /** Deserializes the end of a message. */
    readMessageEnd: function() {
    },

    /** 
     * Deserializes the beginning of a struct. 
     * @param {string} [name] - The name of the struct (ignored)
     * @returns {object} - An object with an empty string fname property
     */    
    readStructBegin: function(name) {
        var r = {};
        r.fname = '';

        //incase this is an array of structs
        if (this.rstack[this.rstack.length - 1] instanceof Array) {
            this.rstack.push(this.rstack[this.rstack.length - 1].shift());
        }

        return r;
    },

    /** Deserializes the end of a struct. */
    readStructEnd: function() {
        if (this.rstack[this.rstack.length - 2] instanceof Array) {
            this.rstack.pop();
        }
    },

    /**
       @class
       @name AnonReadFieldBeginReturn
       @property {string} fname - The name of the field (always '').
       @property {Thrift.Type} ftype - The data type of the field.
       @property {number} fid - The unique identifier of the field.
     */
    /** 
     * Deserializes the beginning of a field. 
     * @returns {AnonReadFieldBeginReturn}
     */
    readFieldBegin: function() {
        var r = {};

        var fid = -1;
        var ftype = Thrift.Type.STOP;

        //get a fieldId
        for (var f in (this.rstack[this.rstack.length - 1])) {
            if (f === null) {
              continue;
            }

            fid = parseInt(f, 10);
            this.rpos.push(this.rstack.length);

            var field = this.rstack[this.rstack.length - 1][fid];

            //remove so we don't see it again
            delete this.rstack[this.rstack.length - 1][fid];

            this.rstack.push(field);

            break;
        }

        if (fid != -1) {

            //should only be 1 of these but this is the only
            //way to match a key
            for (var i in (this.rstack[this.rstack.length - 1])) {
                if (Thrift.Protocol.RType[i] === null) {
                    continue;
                }

                ftype = Thrift.Protocol.RType[i];
                this.rstack[this.rstack.length - 1] =
                    this.rstack[this.rstack.length - 1][i];
            }
        }

        r.fname = '';
        r.ftype = ftype;
        r.fid = fid;

        return r;
    },

    /** Deserializes the end of a field. */
    readFieldEnd: function() {
        var pos = this.rpos.pop();

        //get back to the right place in the stack
        while (this.rstack.length > pos) {
            this.rstack.pop();
        }

    },

    /**
       @class
       @name AnonReadMapBeginReturn
       @property {Thrift.Type} ktype - The data type of the key.
       @property {Thrift.Type} vtype - The data type of the value.
       @property {number} size - The number of elements in the map.
     */
    /** 
     * Deserializes the beginning of a map. 
     * @returns {AnonReadMapBeginReturn}
     */
    readMapBegin: function() {
        var map = this.rstack.pop();
        var first = map.shift();
        if (first instanceof Array) {
          this.rstack.push(map);
          map = first;
          first = map.shift();
        }

        var r = {};
        r.ktype = Thrift.Protocol.RType[first];
        r.vtype = Thrift.Protocol.RType[map.shift()];
        r.size = map.shift();


        this.rpos.push(this.rstack.length);
        this.rstack.push(map.shift());

        return r;
    },

    /** Deserializes the end of a map. */
    readMapEnd: function() {
        this.readFieldEnd();
    },

    /**
       @class
       @name AnonReadColBeginReturn
       @property {Thrift.Type} etype - The data type of the element.
       @property {number} size - The number of elements in the collection.
     */
    /** 
     * Deserializes the beginning of a list. 
     * @returns {AnonReadColBeginReturn}
     */
    readListBegin: function() {
        var list = this.rstack[this.rstack.length - 1];

        var r = {};
        r.etype = Thrift.Protocol.RType[list.shift()];
        r.size = list.shift();

        this.rpos.push(this.rstack.length);
        this.rstack.push(list);

        return r;
    },

    /** Deserializes the end of a list. */
    readListEnd: function() {
        this.readFieldEnd();
    },

    /** 
     * Deserializes the beginning of a set. 
     * @returns {AnonReadColBeginReturn}
     */
    readSetBegin: function(elemType, size) {
        return this.readListBegin(elemType, size);
    },

    /** Deserializes the end of a set. */
    readSetEnd: function() {
        return this.readListEnd();
    },

    /** Returns an object with a value property set to 
     *  False unless the next number in the protocol buffer 
     *  is 1, in which case the value property is True */
    readBool: function() {
        var r = this.readI32();

        if (r !== null && r.value == '1') {
            r.value = true;
        } else {
            r.value = false;
        }

        return r;
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readByte: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readI16: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readI32: function(f) {
        if (f === undefined) {
            f = this.rstack[this.rstack.length - 1];
        }

        var r = {};

        if (f instanceof Array) {
            if (f.length === 0) {
                r.value = undefined;
            } else {
                r.value = f.shift();
            }
        } else if (f instanceof Object) {
           for (var i in f) {
                if (i === null) {
                  continue;
                }
                this.rstack.push(f[i]);
                delete f[i];

                r.value = i;
                break;
           }
        } else {
            r.value = f;
            this.rstack.pop();
        }

        return r;
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readI64: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readDouble: function() {
        return this.readI32();
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readString: function() {
        var r = this.readI32();
        return r;
    },

    /** Returns the an object with a value property set to the 
        next value found in the protocol buffer */
    readBinary: function() {
        return this.readString();
    },

    /** 
     * Method to arbitrarily skip over data */
    skip: function(type) {
        var ret, i;
        switch (type) {
            case Thrift.Type.STOP:
                return null;

            case Thrift.Type.BOOL:
                return this.readBool();

            case Thrift.Type.BYTE:
                return this.readByte();

            case Thrift.Type.I16:
                return this.readI16();

            case Thrift.Type.I32:
                return this.readI32();

            case Thrift.Type.I64:
                return this.readI64();

            case Thrift.Type.DOUBLE:
                return this.readDouble();

            case Thrift.Type.STRING:
                return this.readString();

            case Thrift.Type.STRUCT:
                this.readStructBegin();
                while (true) {
                    ret = this.readFieldBegin();
                    if (ret.ftype == Thrift.Type.STOP) {
                        break;
                    }
                    this.skip(ret.ftype);
                    this.readFieldEnd();
                }
                this.readStructEnd();
                return null;

            case Thrift.Type.MAP:
                ret = this.readMapBegin();
                for (i = 0; i < ret.size; i++) {
                    if (i > 0) {
                        if (this.rstack.length > this.rpos[this.rpos.length - 1] + 1) {
                            this.rstack.pop();
                        }
                    }
                    this.skip(ret.ktype);
                    this.skip(ret.vtype);
                }
                this.readMapEnd();
                return null;

            case Thrift.Type.SET:
                ret = this.readSetBegin();
                for (i = 0; i < ret.size; i++) {
                    this.skip(ret.etype);
                }
                this.readSetEnd();
                return null;

            case Thrift.Type.LIST:
                ret = this.readListBegin();
                for (i = 0; i < ret.size; i++) {
                    this.skip(ret.etype);
                }
                this.readListEnd();
                return null;
        }
    }
};


/**
 * Initializes a MutilplexProtocol Implementation as a Wrapper for Thrift.Protocol
 * @constructor
 */
Thrift.MultiplexProtocol = function (srvName, trans, strictRead, strictWrite) {
    Thrift.Protocol.call(this, trans, strictRead, strictWrite);
    this.serviceName = srvName;
};
Thrift.inherits(Thrift.MultiplexProtocol, Thrift.Protocol, 'multiplexProtocol');

/** Override writeMessageBegin method of prototype*/
Thrift.MultiplexProtocol.prototype.writeMessageBegin = function (name, type, seqid) {

    if (type === Thrift.MessageType.CALL || type === Thrift.MessageType.ONEWAY) {
        Thrift.Protocol.prototype.writeMessageBegin.call(this, this.serviceName + ":" + name, type, seqid);
    } else {
        Thrift.Protocol.prototype.writeMessageBegin.call(this, name, type, seqid);
    }
};

Thrift.Multiplexer = function () {
    this.seqid = 0;
};

/** Instantiates a multiplexed client for a specific service
 * @constructor
 * @param {String} serviceName - The transport to serialize to/from.
 * @param {Thrift.ServiceClient} SCl - The Service Client Class
 * @param {Thrift.Transport} transport - Thrift.Transport instance which provides remote host:port
 * @example
 *    var mp = new Thrift.Multiplexer();
 *    var transport = new Thrift.Transport("http://localhost:9090/foo.thrift");
 *    var protocol = new Thrift.Protocol(transport);
 *    var client = mp.createClient('AuthService', AuthServiceClient, transport);
*/
Thrift.Multiplexer.prototype.createClient = function (serviceName, SCl, transport) {
    if (SCl.Client) {
        SCl = SCl.Client;
    }
    var self = this;
    SCl.prototype.new_seqid = function () {
        self.seqid += 1;
        return self.seqid;
    };
    var client = new SCl(new Thrift.MultiplexProtocol(serviceName, transport));

    return client;
};




//
// Intended for inclusion after the base, external thrift.js source and generated code.  
// This overrides the flat-out incorrect thrift code that needs to be repaired.
//
// Note: it would be better if these fixes could be integrated directly into the 
// thrift repo, but the overhead and turn-around time of doing this properly is, 
// at the moment, not a good fit to the our development process.
//


// Override TXHRTransport.flush
//
// The transport flush method is *broken*.  It violates the basic rule than 
// asynchronous functions must *always* call the callback, even on errors and 
// exceptions.  The base 0.9.2 implementation only calls the callback on 
// status 200 and never invokes the client callback on HTTP status errors.
// 
Thrift.TXHRTransport.prototype.flush = function(async, callback) {
    var self = this;
    if ((async && !callback) || this.url === undefined || this.url === '') {
        return this.send_buf;
    }

    var xreq = this.getXmlHttpRequestObject();

    if (xreq.overrideMimeType) {
        xreq.overrideMimeType('application/json');
    }

    if (callback) {
        //Ignore XHR callbacks until the data arrives, then call the
        //  client's callback
        //========
        // BEGIN CODE PATCH 
        //========
        /*
          xreq.onreadystatechange = 
          (function() {
            var clientCallback = callback;    
            return function() {
              if (this.readyState == 4 && this.status == 200) {
                self.setRecvBuffer(this.responseText);
                clientCallback();
              }
            };
          }());
        */
        //========
        // MODIFIED CODE
        //========
        xreq.onreadystatechange = function() {
            if (this.readyState == 4) {
                //
                // The incoming callback doesn't actually take an error object
                // (another limitation of the thrift code) so there's no way
                // to properly move the status code error back to client callback.
                //
                // To workaround this, short of making signficant patches to the
                // Thrift library, we *rely on the fact that we're using a JSON
                // protocol* and set the buffer to invalid JSON.  The true error
                // gets lost, but at least the client is informed of *a* failure
                // rather than radio silence.
                //
                var err = (this.status == 200) ? false : true;
                self.setRecvBuffer(err ? "http_status_not_200" : this.responseText);
                callback();
            }
        };
        //========
        // END CODE PATCH
        //========
    }

    xreq.open('POST', this.url, !!async);
    xreq.send(this.send_buf);
    if (async && callback) {
        return;
    }

    if (xreq.readyState != 4) {
        throw 'encountered an unknown ajax ready state: ' + xreq.readyState;
    }

    if (xreq.status != 200) {
        throw 'encountered a unknown request status: ' + xreq.status;
    }

    this.recv_buf = xreq.responseText;
    this.recv_buf_sz = this.recv_buf.length;
    this.wpos = this.recv_buf.length;
    this.rpos = 0;
};

module.exports.crouton_thrift = crouton_thrift;
module.exports.Thrift = Thrift;
})();
},{}],3:[function(require,module,exports){
// Provide an HTML debug overlay DIV with status information about the running
// cruntime.
//
module.exports = function(cr) {
    cr.on("options.set_debug", function(cr, enabled) {
        updateDebugOverlay(cr, enabled);
    });
};

var gDebugOverlayEnabled = false;

function updateDebugOverlay(cr, enabled) {
    
    // Ignore the case of debugging being enabled then disabled for
    // reasons of engineering prioritization (not correctness!).
    if (!enabled) {
        return;
    }
    if (gDebugOverlayEnabled) {
        return;
    }

    gDebugOverlayEnabled = true;

    cr.on("spans_recorded", function(spans) {
        var i, link, div;
        var opts = cr.options();

        // For now assume http and assume the port of the web
        // server.
        var host = opts.service_host;
        if (host.match(/^api[.-]/)) {
            host = host.replace(/^api[.-]/, "");
        }
        var url = "http://" + host + ":10001/" + opts.access_token + "/";

        // Check if the element is there, as some in-page script might have
        // cleared the BODY, etc.
        var overlay = document.getElementById("traceguide_overlay");
        if (!overlay) {
            overlay = document.createElement("div");
            overlay.id = "traceguide_overlay";
            overlay.style.position = "fixed";
            overlay.style.bottom = "0";
            overlay.style.right = "0";
            overlay.style.width = "240px";
            overlay.style.height = "120px";
            overlay.style.padding = "4px";
            overlay.style.border = "solid 1px #FFF";
            overlay.style.backgroundColor = "#0060a2";
            overlay.style.color = "#FFF";
            overlay.style.fontSize = "12px";
            overlay.style.fontFamily = "sans-serif";
            overlay.style.opacity = "0.7";

            var close = document.createElement("div");
            close.style.float = "right";
            close.style.cursor = "pointer";
            close.style.color = "#FFF";
            close.onclick = function(evt) {
                overlay.style.display = "none";
            };
            close.innerHTML = "X";
            overlay.appendChild(close);

            link = document.createElement("a");
            link.href = url;
            link.style.color = "#FFF";
            link.style.fontWeight = "bold";
            link.appendChild( document.createTextNode("traceguide.io") );
            var title = document.createElement("div");
            title.appendChild(link);
            overlay.appendChild(title);

            document.body.appendChild(overlay);
        }

        var kMaxSpans = 4;
        var totalLinks = 0;

        for (i = 0; i < overlay.childNodes.length; i++) {
            var child = overlay.childNodes[i];
            if (child.className == "traceguide_span") {
                totalLinks++;
            }
        }
        // If we've already added kMaxSpans+1 lines below the
        // 'header', then don't add anything else.
        if (totalLinks > kMaxSpans) {
            return;
        }

        // Do a primitive trace joining here: only show one link per
        // trace (i.e. one link per set of spans that will be
        // combined). We make the (possibly not true) assumption that
        // all spans in a trace will arrive in the same event (just to
        // keep things simple).
        var joinedSpans = [];
        for (i = 0; i < spans.length; i++) {
            joinedSpans.push({
                join_ids : spans[i].join_ids,
                summary : spans[i].span_name,
                oldest_micros : spans[i].oldest_micros,
                youngest_micros : spans[i].youngest_micros,
            });
        }
        for (i = 0; i < joinedSpans.length; i++) {
            for (var j = i + 1; j < joinedSpans.length; j++) {
                if ((joinedSpans[j].oldest_micros <= joinedSpans[i].youngest_micros &&
                     joinedSpans[j].youngest_micros >= joinedSpans[i].oldest_micros)) {
                    if (joinedSpans[j].oldest_micros < joinedSpans[i].oldest_micros) {
                        joinedSpans[i].summary = joinedSpans[j].summary + ", " + joinedSpans[i].summary;
                        joinedSpans[i].oldest_micros = joinedSpans[j].oldest_micros;
                    } else {
                        joinedSpans[i].summary += ", " + joinedSpans[j].summary;
                    }
                    if (joinedSpans[j].youngest_micros > joinedSpans[i].youngest_micros) {
                        joinedSpans[i].youngest_micros = joinedSpans[j].youngest_micros;
                    }
                    joinedSpans[j] = joinedSpans[joinedSpans.length - 1];
                    joinedSpans = joinedSpans.slice(0, joinedSpans.length - 1);
                    j = i;
                }
            }
        }
        
        for (i = 0; i < joinedSpans.length && totalLinks <= kMaxSpans; i++) {
            var join_key = "";
            var join_url_val = "";
            for (var key in joinedSpans[i].join_ids) {
                if (joinedSpans[i].join_ids.hasOwnProperty(key)) {
                    // Prefer end_user_id if it exists
                    if (join_key === "" || key == "end_user_id") {
                        join_key = key;
                        join_url_val = encodeURIComponent(joinedSpans[i].join_ids[key]);
                    }
                }
            }
            if (join_key === "") {
                continue;
            }

            div = document.createElement("div");
            div.className = "traceguide_span";

            link = document.createElement("a");
            // Use the halfway point between the endpoints in case
            // some further time correction happens.
            var micros = Math.round(joinedSpans[i].youngest_micros / 2 +
                                    joinedSpans[i].oldest_micros / 2);
            link.href = url + "trace/" + join_key +
                "?join_val=" + join_url_val +
                "&at_micros=" + micros;
            link.style.color = "#FFF";
            link.style.whiteSpace = "nowrap";
            link.appendChild(document.createTextNode(joinedSpans[i].summary));
            div.appendChild(link);

            overlay.appendChild(div);
            totalLinks++;
        }
    });
}

},{}],4:[function(require,module,exports){
// Collect relevant info about the environment we're running in
//
module.exports = function(cr) {

    var attrs = {};

    attrs.navigator_available = navigator ? "true" : "false";
    if (navigator) {
        attrs.navigator_app_code_name = navigator.appCodeName;
        attrs.navigator_app_name      = navigator.appName;
        attrs.navigator_app_version   = navigator.appVersion;
        attrs.navigator_do_not_track  = navigator.doNotTrack;
        attrs.navigator_language      = navigator.language;
        attrs.navigator_languages     = navigator.languages;
        attrs.navigator_platform      = navigator.platform;
        attrs.navigator_product       = navigator.product;
        attrs.navigator_product_sub   = navigator.productSub;
        attrs.navigator_user_agent    = navigator.userAgent;
        attrs.navigator_vendor        = navigator.vendor;
        attrs.navigator_vendor_sub    = navigator.vendorSub;
    }

    attrs.screen_available = screen ? "true" : "false";
    if (screen) {
        attrs.screen_width  = screen.width;
        attrs.screen_height = screen.height;
    }

    attrs.window_available = window ? "true" : "false";
    if (window) {
        attrs.window_inner_width  = window.innerWidth;
        attrs.window_inner_height = window.innerHeight;
    }

    attrs.document_available = document ? "true" : "false";
    if (document) {
        attrs.document_domain       = document.domain;
        attrs.document_uri          = document.documentURI;
        attrs.document_referrer     = document.referrer;
        attrs.document_doctype      = document.doctype;
    }


    var memoryAvailable = (window && window.performance && window.performance.memory);
    attrs.performance_memory_available = memoryAvailable ? "true" : "false";
    if (memoryAvailable) {
        var mem = performance.memory;
        attrs.performance_memory_js_heap_size_limit = mem.jsHeapSizeLimit;
        attrs.performance_memory_total_js_heap_size = mem.totalJSHeapSize;
        attrs.performance_memory_used_js_heap_size  = mem.usedJSHeapSize;
    }

    cr.attributes(attrs);
};

},{}],5:[function(require,module,exports){
// Auto-instrument AJAX calls.
//
// Chrome 41 (at least), does not allow the XMLHttpRequest object
// to be used in a typical JS prototype inheritance pattern: i.e. 
// inheriting and overriding functions doesn't "just work" for XMLHttpRequest.
// Given the XHR versions and behavioral / property differences
// between browsers for this object, reimplementing a full proxy via
// composition is a bit of nightmare.
//
// The approach here is to proxy on the global prototype and attach
// new properties to the objects as the calls come through. Slightly
// less elegant, but works.
// 
// Useful:
// - https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
// - http://stackoverflow.com/questions/9181090/is-onload-equal-to-readystate-4-in-xmlhttprequest
// - https://github.com/jquery/jquery/blob/master/src/ajax/xhr.js
// - https://github.com/jquery/jquery/blob/master/src/ajax.js
//

var kMaxURLSnippetLength = 64;

module.exports = function (cr) {
    if (!window.XMLHttpRequest) {
        return;
    }

    var proxied = {
        open : XMLHttpRequest.prototype.open,
        send : XMLHttpRequest.prototype.send,
    };

    XMLHttpRequest.prototype.open = function(method, url) {
        if (skipInstrumentation(cr)) {
            return proxied.open.apply(this, arguments);
        }

        var span = cr.span("XMLHttpRequest");
        cr.spanForObject(this, span);
        this.__cr_url = url;

        if (url) {
            var baseURL = url.split("?")[0];
            span.event("cr/span_attributes", {
                short_url : baseURL,
            });
        }

        var openPayload = {
            arguments : Array.prototype.slice.call(arguments),
        };

        // Record document cookies if there are any
        if (document && document.cookie) {
            var cookies = document.cookie.split(";");
            var data = {};
            var count = 0;
            for (var i = 0; i < cookies.length; i++) {
                var parts = cookies[i].split("=", 2);
                if (parts.length === 2) {
                    var key = parts[0].replace(/^\s+/,"").replace(/\s+$/, "");
                    data[key] = decodeURIComponent(parts[1]);
                    count++;
                }
            }
            if (count > 0) {
                openPayload.cookies = data;
            }
        }

        // Record the URL of the AJAX request as the message.
        var message = arguments[1];
        if (message && message.length > kMaxURLSnippetLength) {
            message = message.substr(0, kMaxURLSnippetLength - 1) + "…";
        }

        span.event("XMLHttpRequest.open", message, openPayload);

        this.addEventListener("readystatechange", function() {
            if (this.readyState == 4) {
                // Do *ALL* browsers send readyState 4 even on error?  If not,
                // the span will never close.

                var responseType = this.responseType;
                var payload = {
                    url          : url,
                    method       : method,
                    headers      : getResponseHeaders(this),
                    status       : this.status,
                    statusText   : this.statusText,
                    responseType : responseType,
                };

                // The responseText property is only valid if the responseType is 
                // '' or 'text'.  There are other types like 'arraybuffer' for which
                // attempting to read responseText will through an exception.
                var validResponseType = (responseType === "" || responseType == "text");
                if (validResponseType && this.responseText) {
                    // Display the payload as JSON if it's parseable as such
                    try {
                        payload.responseJSON = JSON.parse(this.responseText);
                    } catch (e) {
                        payload.responseText = this.responseText;
                    }
                } else {
                    payload.response = this.response;
                }

                if (this.status != 200) {
                    span.error("HTTP status error", this.status);
                }

                span.event("XMLHttpRequest.readystate.done", payload);
                span.end();

            } else if (this.readyState == 2) {

                span.event("XMLHttpRequest.readystate.headers_received", {
                    headers : getResponseHeaders(this),
                });
            }
        });
        
        var result = proxied.open.apply(this, arguments);

        // TODO: check the headers to see if we have an instrumented server on the
        // backend? Or if it's not going to be a CORS request?
        //
        // Unfortunately, the server needs to set explicitly set 
        // "Access-Control-Allow-Headers" to allow these on any CORS request 
        // or else an error is generated.
        
        //    this.setRequestHeader("X-Traceguide-Runtime-GUID", cr.guid());
        //    this.setRequestHeader("X-Traceguide-Span-GUID", span.guid());

        return result;
    };

    XMLHttpRequest.prototype.send = function(arg) {
        if (skipInstrumentation(cr)) {
            return proxied.send.apply(this, arguments);
        }

        var data = Array.prototype.slice.call(arguments);
        
        // If it's a single argument that can be parsed as JSON, then 
        // parse as JSON.
        if (data.length == 1) {
            try {
                data = JSON.parse(data[0]);
            } catch (e) {
                // Ignore the error
            }
        }
        cr.spanForObject(this).event("XMLHttpRequest.send", {
            url  : this.__cr_url,
            data : data,
        });
        return proxied.send.apply(this, arguments);
    };
};

function skipInstrumentation(cr) {
    // Early out of the runtime is disabled or if the XMLHttpRequest
    // is the runtime's own buffer flush (i.e. avoid recursive payload
    // capture!).
    var status = cr.status();
    return (!status.enabled || status.flushActive);
}

// Normalize the getAllResponseHeaders output
function getResponseHeaders(xhr) {
    var raw = xhr.getAllResponseHeaders();
    return raw.replace(/\r/g, "").replace(/^\s+/,"").replace(/\s+$/,"").split(/\n/);
}

},{}],6:[function(require,module,exports){
//===========================================================================//
// Standard event hooks
//===========================================================================//
//
// Note: "standard" web anything is always a mess. A conscious choice needs 
// to be made here between breadth of support for different configurations
// via polyfilling, etc. and keeping the runtime footprint tiny.  
// 
// For the near term, the latest version of Chrome is being assumed and any 
// polyfill and compatibility issues are being deferred to a later date.
// Despite just saying that Chrome is the target, the Mozilla Developer Network
// currently has the best reference on events that can be hooked into:
//
// https://developer.mozilla.org/en-US/docs/Web/Events

var kCreatePageViewSpan = false;

module.exports = function (cr) {

    // Might happen if invoked, for example, inside a web worker
    if (!document) {
        cr.error("No document object available to cruntime");
        return;
    }
    if (!window) {
        cr.error("No window object available to cruntime");
        return;
    }    

    if (kCreatePageViewSpan) {
        var spanPageView = cr.span("cr/page_view");
        spanPageView.event("cr/page_view", {
            url  : document.URL,
        });
    }

    document.addEventListener("DOMContentLoaded", function(event) {
        cr.event("cr/dom_events/DOMContentLoaded", {
            url     : document.URL,
        });
    });

    document.addEventListener("readystatechange", function () {
        cr.event("cr/dom_events/readystatechange", {
            ready_state     : document.readyState,
        });
        if (document.readyState === "complete") {
            if (performance && performance.timing) {
                // Retroactively create spans and log records for the page load times
                // http://stackoverflow.com/questions/13045767/page-load-time-with-javascript
                cr.spanManual("browser/time_to_first_byte",
                        performance.timing.requestStart * 1000.0,
                        performance.timing.responseStart * 1000.0);
                cr.spanManual("browser/response_transfer",
                        performance.timing.responseStart * 1000.0,
                        performance.timing.responseEnd * 1000.0);
                cr.spanManual("browser/dom_loading",
                        performance.timing.domLoading * 1000.0,
                        performance.timing.domInteractive * 1000.0);
                var pageLoadSpanGUID = cr.spanManual("browser/page_load",
                    performance.timing.navigationStart * 1000.0,
                    Date.now() * 1000.0);
                if (window.location && window.location.pathname) {
                    var baseURL = window.location.pathname.split("?")[0];
                    cr.logRecord({
                        span_guid           : pageLoadSpanGUID,
                        stable_name         : "cr/span_attributes",
                        payload             : {
                            short_url       : baseURL,
                        }
                    });
                }

                // Per the spec, JSON.stringify(performance.timing) == "{}", manually build
                // the payload. (https://bugzilla.mozilla.org/show_bug.cgi?id=769173)
                var timingPayload = {};
                var key;
                for (key in performance.timing) {
                    var value = performance.timing[key];
                    if (value) {
                        timingPayload[key] = value;
                    }
                }
                // Store the values relative to the start to increase the readability.
                // There's an argument that the payload values should be 1:1 to the documented
                // performance.timing structure -- which is right probably depends on what
                // we eventually want customers to be able to do with payloads.
                var offset = timingPayload.fetchStart;
                for (key in timingPayload) {
                    if (timingPayload[key] > 0) {
                        timingPayload[key] -= offset;
                    }
                }

                cr.logRecord({
                    timestamp_micros    : (performance.timing.domInteractive * 1000.0),
                    span_guid           : pageLoadSpanGUID,
                    stable_name         : "cr/performance/timing_ms",
                    message             : "browser page load timing offsets in milliseconds",
                    payload             : timingPayload,
                });
            }
        }
    });

    // NOTE: this is likely gratuitous -- capture any mouse click that we
    // can. This is not as useful as it might seem since the event cascading
    // model likely filters out the clicks of interest (buttons, links) and
    // thus leaves the actual inverse set of what we'd really like to know.
    // Could scan the document for "a", "button", ".btn" -- there are 
    // probe effect risks in that approach, but it's a possibility.  Perhaps
    // it could be an opt-in.
    document.addEventListener("click", function(evt) {
        // TODO: we can't just pass in the evt object as it has circular 
        // references and the JS cruntime doesn't marshal those correctly yet.
        var payload = {
            clientX     : evt.clientX,
            clientY     : evt.clientY,
        };
        if (evt.target) {
            payload.target_id  = evt.target.id;
            payload.class_name = evt.target.className;
            payload.tag_name   = evt.target.tagName;

            // Get the DOM path to the clicked element
            var path = [ payload.tag_name ];
            var elem = evt.target.parentNode;
            while (elem) {
                if (elem.tagName) {
                    path.push(elem.tagName);
                }
                elem = elem.parentNode;
            }
            payload.path = path.reverse().join(">");
        }
        cr.event("cr/dom_events/click", payload);
    });

    // Page unload events...
    //
    // For the record, Chrome doesn't allow you to override 
    // window.location.reload() -- so we can't intercept that and flush.
    //
    window.addEventListener("beforeunload", function () {
        cr.event("cr/dom_events/beforeunload");
        if (kCreatePageViewSpan) {
            spanPageView.end();
        }

        // NOTE: the buffer is flushed *synchronously* here.
        cr.shutdown();
    });

    window.addEventListener("unload", function () {
        cr.event("cr/dom_events/unload");
    });
};





},{}],7:[function(require,module,exports){
// Platform-specific functions to encapsulate the differences from crutinme-common

//===========================================================================//
// Constants
//===========================================================================//

var kCookieTimeToLiveSeconds = 7 * 24 * 60 * 60;
var kTraceguideSessionIdKey  = "traceguide_session_id";

//===========================================================================//
// Exports
//===========================================================================//

var lib = {};

lib._traceguideSessionId = cookie(kTraceguideSessionIdKey);

lib.isNode = false;

lib.console = console;

lib.nowMicros = (function() {
    // Is a hi-res timer available?
    if (performance &&
        performance.now &&
        performance.timing &&
        performance.timing.navigationStart) {

        var start = performance.timing.navigationStart;
        return function() {
            return Math.floor((start + performance.now()) * 1000.0);
        };
    } else {
        // The low-res timer is the best we can do
        return function() {
            return Date.now() * 1000.0;
        };
    }
})();

// Low-quality GUID: this is just a 53-bit random integer! (53 bits since the
// backing store for the number is a 64-bit float).
lib.generateGUID = function() {
    return Math.floor(Math.random() * 9007199254740992).toString(10);
};

lib.getTraceguideSessionId = function() {
    return lib._traceguideSessionId;
};

// Generate or reuse the existing runtime GUID
lib.runtimeGUID = function(groupName) {

    // The browser needs to account for the groupName for the case that multiple
    // logical apps/services/runtime groups may be hosted on the same domain, meaning
    // they *should not* share the same runtime GUID.
    var cookieKey = "traceguide_guid";
    if (groupName) {
        cookieKey += "/" + groupName;
    }

    var runtimeGUID = cookie(cookieKey);

    // A special global __cr_override_runtime_guid exists for test environments
    // where cookies and localStorage are not available.
    if (!runtimeGUID && window && window.__cr_override_runtime_guid) {
        runtimeGUID = window.__cr_override_runtime_guid;
    }

    // Check for a GUID from the existing session and create the runtime
    // GUID based off of that (i.e. keep the same runtime GUID for all 
    // browser instances in the same session).
    //
    // If there is no existing session, create a new random GUID.
    if (!runtimeGUID) {
        var sessionGUID = cookie("traceguide_session_guid");
        if (sessionGUID) {
            runtimeGUID = sessionGUID;
        } else {
            runtimeGUID = lib.generateGUID();
        }
    }

    // Always write back the cookie to renew the TTL
    cookie(cookieKey, runtimeGUID, kCookieTimeToLiveSeconds, "/");

    // Also, while we're here, check the status of a well-known key
    // that can be used to coordinate with the server to set a join ID.
    // The server may have already set this key -- or if it hasn't, the
    // browser can generate one.
    //
    // Note that it's ok that this might be used for different
    // runtime groups in different projects: the goal here is only to
    // set an id for this session. This convention is also used in
    // state.js.
    var traceguideSessionId = lib.getTraceguideSessionId();
    if (!traceguideSessionId) {
        traceguideSessionId = "rt-" + runtimeGUID;
    }
    cookie(kTraceguideSessionIdKey, traceguideSessionId, kCookieTimeToLiveSeconds, "/");

    // Record the session ID now that we've figured out if there was an
    // existing one or if we needed to generate new one.
    //
    // The not-so-well-defined point at which this variable is initialized is
    // unfortunate, but the initialization order is a bit complex: we need the 
    // groupName before the runtime GUID can be determined -- that's up to the 
    // user to specify at some point -- and the runtime GUID is needed to 
    // generate the session ID (TODO: does it have to be?).
    lib._traceguideSessionId = traceguideSessionId;

    return runtimeGUID;
};

// Doesn't need to be long-lived storage... just longer than a page load.
lib.localStore = function(key, value) {
    if (arguments.length == 2) {
        localStorage.setItem("traceguide/" + key, value);
        return;
    }
    return localStorage.getItem("traceguide/" + key);
};

var _console_obj   = console;
var _console_log   = console.log;
var _console_warn  = console.warn;
var _console_error = console.error;

var base = {
    log   : function(args) { return _console_log.apply(_console_obj, args); },
    warn  : function(args) { return _console_warn.apply(_console_obj, args); },
    error : function(args) { return _console_error.apply(_console_obj, args); },
};

lib.logger = {
    info  : base.log,
    warn  : base.warn,
    error : base.error,
    fatal : base.error,
};

lib.abort = function() {
    throw new Error("Fatal exception");
};

// TODO: support the skip & unfiltered args
lib.stackTrace = function(skip, unfiltered) {
    // This approach only works on a subset of browsers!
    var stack = new Error().stack;
    if (typeof stack === "string") {
        stack = stack.split("\n").slice(3);
        for (var i = 0; i < stack.length; i++) {
            stack[i] = stack[i].replace(/^\s*at\s+/, "");
        }
        return stack;
    } else {
        return undefined;
    }
};

var proxyFilename = "<browser>";

lib.setSourceUrl = function (url) {
    if (typeof url === "string") {
        var parts = url.split("/");
        proxyFilename = parts[parts.length - 1];
    }
};

// Returns the placeholder for the filename in a log record.
lib.defaultLogFilename = function() {
    return proxyFilename;
};

module.exports = lib;

//===========================================================================//
// Helpers
//===========================================================================//

// This function is copied directly from https://github.com/litejs/browser-cookie-lite.
// It is licensed under the MIT License and authored by Lauri Rooden.
function cookie(name, value, ttl, path, domain, secure) {
    if (arguments.length > 1) {
        var newCookie = name + "=" + encodeURIComponent(value) +
            (ttl ? "; expires=" + new Date(+new Date()+(ttl*1000)).toUTCString() : "") +
            (path   ? "; path=" + path : "") +
            (domain ? "; domain=" + domain : "") +
            (secure ? "; secure" : "");
        document.cookie = newCookie;
        return newCookie;
    }
    return decodeURIComponent((("; "+document.cookie).split("; "+name+"=")[1]||"").split(";")[0]);
}


},{}],8:[function(require,module,exports){
//===========================================================================//
// Polyfills
//===========================================================================//
// 
// Does not fill polygons; normalizes the JS environment across browsers.
// There are libraries for this sort of thing. This is just a cut & paste of
// the subset needed.
//

// See:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
// http://stackoverflow.com/questions/11488540/copy-prototype-for-inheritance
if (typeof Object.create != 'function') {
    Object.create = (function() {
        var Temp = function() {};
        return function (prototype) {
            if (arguments.length > 1) {
                throw Error('Second argument not supported');
            }
            if (typeof prototype != 'object') {
                throw TypeError('Argument must be an object');
            }
            Temp.prototype = prototype;
            var result = new Temp();
            Temp.prototype = null;
            return result;
        };
    })();
}
},{}],9:[function(require,module,exports){
//===========================================================================//
// Export
//===========================================================================//

var thrift_wrapper  = require("./src/generated/crouton_thrift_all.js"),
    common          = require("node/packages/rl-cruntime-common"),
    packageObject   = require("./package.json"),
    platform        = require("./src/platform_browser.js"),
    polyfill        = require("./src/polyfill.js");

var options = {
    paused              : false,
    cruntime_platform   : packageObject.name,
    cruntime_version    : packageObject.version,
    debug               : false,
};

// Check initialization options on the actual script element that included
// this.  E.g.
//
// <script src="mypath/rlcruntime-browser.min.js" data-paused="true"></script>
//
// The last script known about in the DOM should be the currently running
// script as scripts execute as soon as the browser hits the <script> tag.
var scripts = document.getElementsByTagName("SCRIPT");
var script = null;
if (scripts.length > 0) {
    script = scripts[scripts.length - 1];

    var dataPaused = script.dataset.paused;
    switch (dataPaused) {
        case "true":
        case 1:
            options.paused = true;
            break;
    }

    var accessToken = script.dataset.access_token;
    if (typeof accessToken === "string" && accessToken.length > 0) {
        options.access_token = accessToken;
    }
    var groupName = script.dataset.group_name;
    if (typeof groupName === "string" && groupName.length > 0) {
        options.group_name = groupName;
    }
    var serviceHost = script.dataset.service_host;
    if (typeof serviceHost === "string" && serviceHost.length > 0) {
        options.service_host = serviceHost;
    }
    var servicePort = script.dataset.service_port;
    if (servicePort) {
        options.service_port = parseInt(servicePort);
    }
    
    // Special case the "end_user_id" since that is by far the most likely
    // join ID to be set globally by browser instrumentation
    var endUserId = script.dataset.end_user_id;
    if (endUserId) {
        options.join_ids = { end_user_id : endUserId };
    }
    var joinIds = script.dataset.join_ids;
    if (joinIds) {
        try {
            var joinIds = JSON.parse(joinIds);
            // Handle the case that both data-end_user_id and data-join_ids are
            // used.
            if (endUserId) {
                joinIds.end_user_id = endUserId;
            }
            options.join_ids = joinIds;
        } catch (e) {
            console.error("Could not parse join_ids string:", joinIds);
        }
    }

    var enable = script.dataset.enable;
    if (typeof enable == "string") {
        if (enable == "true") {
            options.enable = true;
        } else if (enable == "false") {
            options.enable = false;
        }
    }
    var debug = script.dataset.debug;
    if (typeof debug == "string" && debug == "true") {
        options.debug = true;
    }
}

var state = common.createState({
    thriftTypes     : thrift_wrapper.crouton_thrift, 
    thriftLibrary   : thrift_wrapper.Thrift,
    platform        : platform,
    events          : {
        "preinitialize" : function(cr) {
            require("./src/initialize_debug_overlay.js")(cr);
        },
        "postinitialize" : function(cr) {
            require("./src/initialize_runtime_attributes.js")(cr);
            require("./src/instrument_ajax.js")(cr);
            require("./src/instrument_document.js")(cr);
        },
        "options.set_group_name" : function(cr) {
            // Set a default join ID based on the session ID.  Server
            // instrumentation (should) look at the traceguide_session_id cookie as
            // well to create connected traces via this join ID.
            var sessionId = platform.getTraceguideSessionId();
            if (sessionId) {
                cr.options({
                    join_ids: {
                        traceguide_session_id : sessionId,
                    },
                });
            }
        },
    }
});

var api = common.api(state);

if (script) {
    // Let the cruntime (and platform abstraction layer) know the name of the
    // current source script (which may not be cruntime-*.js if the cruntime
    // code is bundled in container script).
    api.attributes({
        cruntime_source_url : script.src,
    });
    platform.setSourceUrl(script.src.replace(/\?.*$/, ""));

    // Set the global name after the API object is created
    var globalName = script.dataset.global_name;
    if (typeof globalName === "string" && globalName.length > 0) {
        window[globalName] = api;
    }    
}
api.initialize(options);

module.exports = api;

},{"./package.json":1,"./src/generated/crouton_thrift_all.js":2,"./src/initialize_debug_overlay.js":3,"./src/initialize_runtime_attributes.js":4,"./src/instrument_ajax.js":5,"./src/instrument_document.js":6,"./src/platform_browser.js":7,"./src/polyfill.js":8,"node/packages/rl-cruntime-common":10}],10:[function(require,module,exports){
//===========================================================================//
// Dependencies
//===========================================================================//

var State = require("./src/state.js");

//===========================================================================//
// Exported API
//===========================================================================//

var lib = {};

// Creates the "state" object which contains the core functionality of the 
// client library including the buffering and all raw/low-level logging and 
// span calls which the platform-dependent code can call.  The platform 
// libraries are intended to be slim wrappers on this State object.
//
// The "opts" argument passes in all the platform-dependent hooks and 
// information.
//
lib.createState = function(opts) {
    
    // Check that the necessary thrift connection points are there
    if (!opts.thriftTypes) {
        throw new Error("opts.thriftTypes required");
    }
    if (!opts.thriftLibrary) {
        throw new Error("opts.thriftLibrary required");
    }

    // Check that our pal, the platform abstraction layer, is fully 
    // specified.
    if (!opts.platform) {
        throw new Error("opt.platform required");
    }
    if (typeof opts.platform.nowMicros !== "function") {
        throw new Error("nowMicros is a required platform function");
    }
    if (typeof opts.platform.generateGUID !== "function") {
        throw new Error("generateGUID is a required platform function");
    }
    if (typeof opts.platform.console !== "object") {
        throw new Error("console is not a valid platform object");
    }
    if (typeof opts.platform.console.log !== "function") {
        throw new Error("console.log is not a valid platform function");
    }
    if (typeof opts.platform.console.warn !== "function") {
        throw new Error("console.warn is not a valid platform function");
    }
    if (typeof opts.platform.console.error !== "function") {
        throw new Error("console.error is not a valid platform function");
    }
    if (typeof opts.platform.localStore !== "function") {
        throw new Error("console.localStore is not a valid platform function");
    }

    return new State(
        opts.thriftTypes, 
        opts.thriftLibrary, 
        opts.platform, 
        opts.events
    );
};

lib.api = require("./src/api.js");

module.exports = lib;

},{"./src/api.js":11,"./src/state.js":15}],11:[function(require,module,exports){
// Defines the common, client-facing API for cruntime. The platform-specific API 
// may be a slight variation of this depending on platform capabilities.
//
// The code herein is intended to a slim syntactic layer over the implementation
// provided by the State object.

var imp = null;

//===========================================================================//
// Initialization & Configuration
//===========================================================================//

/**
    The Traceguide runtime object.

    This object is normally exposed to the code as a singleton accessible
    via the ``cr`` variable.


    ```js
    var cr = require("rl-cruntime-node");

    cr.initialize({
        access_token : "<your access token here>",
        group_name   : "my_service_name",
    });

    cr.log("The current time is:", new Date());
    ```
 */
function Runtime() {
} 

/**
    @group Initialization
    @brief initialize and begin instrumentation reporting
    @signature  initialize (opts)

    Initializes the runtime library and starts the reporting loop.

    * `opts` object - see the `options()` method for details on the valid
    set of options

    *Example*

    ```js
    cr.initialize({
        access_token : "<your access token here>",
        group_name   : "my_service_name",
    });
    ```

    For convenience, making multiple calls to `initialize()` is valid: all
    calls will be treated as equivalent to a call to `options()` with the
    sole difference that the reporting loop will begin on the first call that
    provides it with sufficient information to begin reporting.  This
    behavior can be helpful for library code that may not a clear, single 
    entry-point.
 */
Runtime.prototype.initialize = function () { 
    return imp.initialize.apply(imp, arguments); 
};

/**
    @group Initialization
    @brief disconnect and clean-up instrumentation reporting
    @signature shutdown ()

    Explicitly shuts down the runtime library.  

    This stops the reporting loop. Any information recorded after
    shutdown has been called will be ignored.

    The runtime will automatically shut down when the process exits; this
    method is available if explicit control over the shutdown is desired.
 */
Runtime.prototype.shutdown = function() { 
    return imp.shutdown.apply(imp, arguments); 
};

/**
    @group Configuration
    @brief set instrumentation options
    @signature options (opts)

    Sets the options for the runtime library.

    ::: mark
    Scrubber documentation is needed!
    :::

    * `opts` object 
        * `access_token` string - sets the project access token for the runtime
        * `group_name` string - sets the group name for the runtime
        * `enable` bool - if set to false, will disable the runtime reporting and
            turn all runtime calls into no-ops. Note: it is currently *not* possible to 
            re-enable the runtime once it is disabled.
        * `scrubber` object - sets the data scrubbing options
        * `end_user_id` string - sets the `end_user_id` join id. See note below.
        * `join_ids` object - sets global join IDs that will be included on all spans
            created by the runtime.
        * `log_to_stdio` bool - echos `log`, `warn`, and `error` to `stdout` and `stderr`.
            In the case of the browser, this will enabling echoing to the web browser
            console. Default false.
        * `override_console` bool - if true, `console.log`, `console.warn`, and `console.error`
            calls will automatically created log records. Default true.
        * `refresh_interval_millis` int - sets the reporting loop interval in milliseconds.
            Default 2500.
        * `max_log_records` int - sets the maximum number of log records the runtime
            will buffer between reports; only a sub-sample of the records will be
            kept beyond this maximum. Defaults to 1024.
        * `max_span_records` int - sets the maximum number of span records the runtime
            will buffer between reports; only a sub-sample of the records will be
            kept beyond this maximum. Defaults to 1024.
        * `service_host` string - explicitly sets the service hostname.
        * `service_port` [int|string] - explicitly sets the service port
        * `certificate_verification` bool - if false, https communication will not
            verify SSL certificates. This is intended for development environments
            only. Default true.

    **`access_token` and `group_name`**

    `access_token` and `group_name` are the only two required configuration
    options. They must be specified as part of a call to `initialize()` for
    the runtime to begin reporting.

    **`end_user_id`**

    The `end_user_id` is useful only in the context of the browser runtime,
    where all opertations will be made on behalf of a single user.
    If the web server is rendering the served page as a template and has access
    to the current user id, it may be convenient to set this as part of the
    script initialization.

    *Example*

    This example assumes a Handlebars-like template rendering syntax:
    
    ```html
    <script type="text/javascript" 
        src="scripts/rl-cruntime-browser.min.js"
        data-access_token="{{ config.access_token }}" 
        data-group_name="my_web_app" 
        data-end_user_id="{{ user_profile.username }}"
        data-global_name="cr"></script>
    ```

    **`scrubber`**

    The data scrubbing allows a set of custom rules which will be run against 
    any log record data and payloads being set to the Traceguide server.  This 
    allows personal-identifying information or otherwise security-sensitive 
    data to be removed or replace before any data is sent to Traceguide.

    The scrubbing rules are general and flexible. See the  full data scrubbing 
    documentation for details (coming soon!).

    *Example*

    ```json
    {
        "scrubber" : {
            "rules" : [
                {
                    "match" : [ "keys", "url_query_string" ],
                    "op"    : "remove",
                    "keys"  : [ "password", "client_secret", "refresh_token" ]
                },
                {
                    "match" : "keys",
                    "op"    : "replace",
                    "keys"  : [ "api_token", "home_address", "phone_number" ],
                    "value" : "<hidden>"
                }
            ]
        }
    }
    ```
 */
Runtime.prototype.options = function() { 
    return imp.options.apply(imp, arguments); 
};

/**
    @group Configuration
    @brief sets attributes on the runtime
    @signature attributes () -> object
    @signature attributes (attrs)

    ::: mark
    As far as the customer is concerned, what are attributes for...?
    :::

    If called with no arguments returns a map of the current attributes
    as a set of key-value pairs.

    Merges into additional attributes that describe 
    the runtime.  Replaces existing attributes if the key-value pair already exists.

    * `attrs` object - key-value pairs to merge into the runtime attributes
 */
Runtime.prototype.attributes = function() { 
    return imp.runtimeAttributes.apply(imp, arguments); 
};

/**
    @group Configuration
    @brief returns the runtime's globally unique indentifier 
    @signature guid () -> string

    Returns the runtime's GUID

    * `return` string - the runtime GUID
 */
Runtime.prototype.guid = function() { 
    return imp.runtimeGUID(); 
};

/**
    @group Configuration
    @brief returns true if instrumentation is currently enabled
    @signature enabled () -> bool

    Returns whether the runtime is enabled.

    * `return` bool - returns whether the runtime is currently enabled.
 */
Runtime.prototype.enabled = function() { 
    return imp.getEnabled(); 
};

/** 
    @group Configuration
    @brief returns true if the runtime is in verbose mode
    @signature verbose () -> bool

    Returns whether the current runtime is in verbose mode.

    In this mode, additional spans and logs are recorded. Intended for
    debugging purposes.

    * `return` bool - returns whether the runtime is currently enabled.
 */
Runtime.prototype.verbose = function() { 
    return imp.getVerbose(); 
};

/*
    EXPERIMENTAL 
    Returns a status object describing the current state of the runtime.
 */
Runtime.prototype.status = function() { return imp.getStatus(); };

//===========================================================================//
// Logging
//===========================================================================//

// -- console object compatible API --- 
//
// Takes variable numbers of arguments, logging them as a space-separated 
// list.
//

/**
    @group Logging
    @brief create a normal log record and optional payload information
    @signature log (any...)

    Records a log statement. The call signature is intended to be the same
    as `console.log`.

    Log statements are *not* echoed to `stdout` (or the web browser console) by 
    default.  Use the `log_to_stdio` option in `initalize()` or `option()` to 
    enable echoing.
 */
Runtime.prototype.log     = function() { return imp.logArgumentsInfo(arguments); };

/**
    @group Logging
    @brief create a normal log record and optional payload information
    @signature info (any...)

    Records a log statement. The call signature is intended to be the same
    as `console.log`.  `info()` is an alias for `log()`.

    Log statements are *not* echoed to `stdout` (or the web browser console) by 
    default.  Use the `log_to_stdio` option in `initalize()` or `option()` to 
    enable echoing.
 */
Runtime.prototype.info    = function() { 
    return imp.logArgumentsInfo(arguments); 
};

/**
    @group Logging
    @brief log a warning and optional payload information
    @signature warn (any...)

    Records a log statement. The call signature is intended to be the same
    as `console.warn`.

    Log statements are *not* echoed to `stdout` (or the web browser console) by 
    default.  Use the `log_to_stdio` option in `initalize()` or `option()` to 
    enable echoing.
 */
Runtime.prototype.warn    = function() { 
    return imp.logArgumentsWarn(arguments); 
};

/**
    @group Logging
    @brief log an error and optional payload information
    @signature error (any...)

    Records a log statement. The call signature is intended to be the same
    as `console.error`.

    Log statements are *not* echoed to `stderr` (or the web browser console) by 
    default.  Use the `log_to_stdio` option in `initalize()` or `option()` to 
    enable echoing.
 */
Runtime.prototype.error   = function() { return imp.logArgumentsError(arguments); };

/**
    @group Logging
    @brief log a fatal error and optional payload information
    @signature fatal (any...)

    Records a log statement and exits the process. The call signature is intended 
    to be the same as `console.error` with the addition the call will terminate
    the process after the log statement is made.

    The runtime *will* attempt a final flush of buffered data before process
    termination.

    On the browser, this function is equivalent to a call to `error` as there
    is no process to terminate in the context of a browser.
 */
Runtime.prototype.fatal   = function() { 
    return imp.logArgumentsFatal(arguments); 
};

// -- glog / sprintf compatible API --- //
//
// Takes sprintf-like format string as a first argument followed by a series
// of data objects.
//

Runtime.prototype.logf    = function() { return imp.logFormattedInfo(arguments); };
Runtime.prototype.infof   = function() { return imp.logFormattedInfo(arguments); };
Runtime.prototype.warnf   = function() { return imp.logFormattedWarn(arguments); };
Runtime.prototype.errorf  = function() { return imp.logFormattedError(arguments); };
Runtime.prototype.fatalf  = function() { return imp.logFormattedFatal(arguments); };

// -- logging directly to console without instrumentation -- //

Runtime.prototype.plain = {};
Runtime.prototype.plain.log   = function() { return imp.plainLog.apply(imp, arguments); };
Runtime.prototype.plain.warn  = function() { return imp.plainWarn.apply(imp, arguments); };
Runtime.prototype.plain.error = function() { return imp.plainError.apply(imp, arguments); };

// -- logging active only in verbose mode -- //

Runtime.prototype.v1 = {};
Runtime.prototype.v1.log   = function() { return imp.verbose() ? lib.log.apply(lib, arguments) : undefined; };
Runtime.prototype.v1.info  = function() { return imp.verbose() ? lib.info.apply(lib, arguments) : undefined; };
Runtime.prototype.v1.warn  = function() { return imp.verbose() ? lib.warn.apply(lib, arguments) : undefined; };
Runtime.prototype.v1.error = function() { return imp.verbose() ? lib.error.apply(lib, arguments) : undefined; };

// -- miscellaneous -- //

/**
    @group Logging
    @brief log an exception object with error information
    @signature exception(err)

    A special-case log call that will log exception objects in a consistent 
    manner that also captures as much aggregate information as possible.

    * `err` any - any exception-like object
 */
Runtime.prototype.exception = function(e) { 
    return imp.logException(e); 
};

/*EXPERIMENTAL
    Create a detailed log record field-by-field
 */
Runtime.prototype.logRecord = function() { return imp.logRecord.apply(imp, arguments); };

//===========================================================================//
// Events
//===========================================================================//

Runtime.prototype.event     = function() { return imp.logEvent.apply(imp, arguments); };
Runtime.prototype.eventWrap = function() { return imp.eventWrap.apply(imp, arguments); };

//===========================================================================//
// Spans
//===========================================================================//

/**
    @group Spans
    @brief create a new span for an operation
    @signature span (operation) -> SpanHandle
    @signature span (operation, joinIdKeyValues) -> SpanHandle
    @signature span (operation, callthrough) -> any
    @signature span (operation, joinIdKeyValues, callthrough) -> any

    Creates a handle object to a new span.

    * `operation` string - the string name of the operation that represents
    * `joinIdKeyValues` object - a map of key-value pairs that will be added to
        the span handle
    * `callthrough` f(handle) - 
        * a function that will be invoked with a single argument
        of the span handle
        * The span is automaticalled `end()`'ed upon return of the
        callthrough
        * Any exceptions throw by the callthrough will be logged and passed onto
        the caller
        * The return value of the call through will become the return value of the
        `span()` call
    * `return` any
        * If `callthrough` is *not* specified, the return value will be a
        handle to the newly created span
        * If `callthrough` is specified, the return value will be the return
        value of the callthrough
 */
Runtime.prototype.span        = function() { 
    return imp.span.apply(imp, arguments); 
};

/**
    @group Spans
    @brief wrap a synchronous function call in an operation
    @signature callSync (operation, f, [self], [arg0], [arg1], ...) -> any
    @signature callSync (operation, joinIds, f, [self], [arg0], [arg1], ...) -> any

    Invokes a function similarly to the native `call` function but also wraps
    the call inside a span with the given operation name.  It will automatically
    log call arguments, return values, and any exceptions; the span itself is
    automatically begun and ended scoped to the call.

    The invoked function must be a synchronous function.

    * `operation` string - the operation name to assign to the created span
    * `joinIds` object - join IDs to set on the created span
    * `f` function - the function to invoke
    * `self` object - the `this` value to use when invoking `f`
    * `arg...` any - the arguments to pass when invoking `f`
    * `return` any - returns the value of the invoked function `f`


    *Example*

    ```js
    function add (a, b) { 
        return a + b;
    }

    // Create an operation named "my_add_operation" for the call to the
    // add function.
    var result = cr.callSync("my_add_operation", add, null, 40, 2);
    console.log(result);    // prints "42"
    ```
 */
Runtime.prototype.callSync = function() {
    return imp.callSync.apply(imp, arguments);
};

/**
    @group Spans
    @brief wrap a synchronous function call in an operation
    @signature applySync (operation, f, [self], [args]) -> any
    @signature applySync (operation, joinIds, f, [self], [args]) -> any

    Behaves exactly the same `callSync` but the function arguments are passed
    as an array.
 */
Runtime.prototype.applySync = function() {
    return imp.applySync.apply(imp, arguments);
};

/**
    @group Spans
    @brief wrap an asynchronous function call in an operation
    @signature callAsync (operation, f, [self], [arg0], [arg1], ..., callback) -> any
    @signature callAsync (operation, joinIds, f, [self], [arg0], [arg1], ..., callback) -> any

    The asynchronous version of `callSync`. This assumes the final argument
    to `f` will be a callback function that is invoked when the asynchronous
    function is complete and that the first argument to the callback function
    is an optional error argument.


    *Example*

    ```js
    function add (a, b, done) { 
        setTimeout(function() {
            // The first argument is the error, if one occurred
            done(null, a + b);
        }, 50);
    }

    // Create an operation named "my_add_operation" for the call to the
    // add function.
    cr.callAsync("my_add_operation", add, null, 40, 2, function(err, result) {
        console.log(result);    // prints "42"
    });
    ```    
 */
Runtime.prototype.callAsync = function() {
    return imp.callAsync.apply(imp, arguments);
};

/**
    @group Spans
    @brief wrap an asynchronous function call in an operation
    @signature applyAsync (operation, f, [self], [args]) -> any
    @signature applyAsync (operation, joinIds, f, [self], [args]) -> any

    Behaves exactly as `callAsync` with the exception that the arguments to the
    invoked function are passed as an array. The final element of the array is
    expected to be the callback function.
 */
Runtime.prototype.applyAsync = function() {
    return imp.applyAsync.apply(imp, arguments);
};



Runtime.prototype.spanWrap    = function() { return imp.spanWrap.apply(imp, arguments); };
Runtime.prototype.spanSection = function() { return imp.spanSection.apply(imp, arguments); };
Runtime.prototype.spanManual  = function() { return imp.spanManual.apply(imp, arguments); };

Runtime.prototype.setActiveSpanName = function() { return imp.setActiveSpanName.apply(imp, arguments); };

/*EXPERIMENTAL

    If called with an object and a the span handle, that span handle will be
    associated with the object.

    If called with one argument. Return the span handle associated with the 
    given object (e.g. HTTP request  object) if there is one. If there is not
    a span handle for that object, the active span is return (if it is known).
    If no active span known, a valid span handle interface is returned, but 
    does not correspond to any particular span (e.g. all logs recorded using
    that interface globally).
 */
Runtime.prototype.spanForObject = function(obj, handle) { 
    return imp.spanForObject.apply(imp, arguments); 
};

// Library instrumentation helpers
Runtime.prototype.getActiveJoinIds = function() { return imp.getActiveJoinIds.apply(imp, arguments); };
Runtime.prototype.setActiveJoinIds = function() { return imp.setActiveJoinIds.apply(imp, arguments); };
Runtime.prototype.setActiveSpan    = function() { 
    if (arguments.length === 2) {
        return imp.setActiveSpan.call(imp, arguments[0], null, [], arguments[1]);
    } else {
        return imp.setActiveSpan.apply(imp, arguments);
    }
};

//===========================================================================//
// Counters & Gauges 
//===========================================================================//

// TBD
Runtime.prototype.counter     = function(name, value) {};
Runtime.prototype.gauge       = function(name, value) {};

//===========================================================================//
// Buffer Control
//===========================================================================//

Runtime.prototype.pause   = function()            { throw new Error("NOT_YET_IMPLEMENTED"); };
Runtime.prototype.resume  = function()            { throw new Error("NOT_YET_IMPLEMENTED"); };
Runtime.prototype.flush   = function(synchronous, done) {
    return imp.flushBuffer(synchronous, done);
};
Runtime.prototype.discard = function()            { imp.discardBuffers(); };

//===========================================================================//
// Reporting
//===========================================================================//

Runtime.prototype.stats = function() { return imp.reportBufferStats(); };

//===========================================================================//
// EventEmitter-style listeners
//===========================================================================//

Runtime.prototype.on             = function () { return imp.on.apply(imp, arguments); };
Runtime.prototype.removeListener = function () { return imp.removeListener.apply(imp, arguments); };
Runtime.prototype.once           = function () { return imp.once.apply(imp, arguments); };

//===========================================================================//
// Exports
//===========================================================================//

// Singleton
var lib = new Runtime();

module.exports = function (implObject) {
    imp = implObject;
    imp.api = lib;

    // TODO: Remove this field. The implementation object should *never* need
    // to be accessed directly. It's here for development to allow inspection
    // of the values during debugging.
    lib.__imp = imp;
    
    return lib;
};

},{}],12:[function(require,module,exports){
var kLocalStoreKey = "clock_state";
// How many updates before a sample is considered old. This happens to
// be one less than the number of samples in our buffer but that's
// somewhat arbitrary.
var kMaxOffsetAge = 7;

function ClockState(platform, state) {
    this.platform = platform;
    this.state = state;
    // The last eight samples, computed from timing information in
    // RPCs.
    this.samples = [];
    this.currentOffsetMicros = 0;
    // How many updates since we've updated currentOffsetMicros.
    this.currentOffsetAge = kMaxOffsetAge + 1;

    // Try to load samples from the local store.
    var storedData;
    try {
        if (this.state.options().service_host) {
            storedData = JSON.parse(platform.localStore(
                kLocalStoreKey + "/" + state.options().service_host));
        }
    } catch (e) {}
    // Only use the data if it's recent.
    var kStoredSamplesTTLMicros = 60 * 60 * 1000 * 1000; // 1 hour
    if (storedData &&
        storedData.timestamp_micros &&
        storedData.timestamp_micros > platform.nowMicros() - kStoredSamplesTTLMicros) {
        // Make sure there are no more than (kMaxOffsetAge+1) elements
        this.samples = storedData.samples.slice(-(kMaxOffsetAge+1));
    }
    // Update the current offset based on these data.
    this.update();
}

// Add a new timing sample and update the offset.
ClockState.prototype.addSample = function(originMicros,
                                          receiveMicros,
                                          transmitMicros,
                                          destinationMicros) {
    var latestDelayMicros = Number.MAX_NUMBER;
    var latestOffsetMicros = 0;
    // Ensure that all of the data are valid before using them. If
    // not, we'll push a {0, MAX} record into the queue.
    if (originMicros > 0 && receiveMicros > 0 &&
        transmitMicros > 0 && destinationMicros > 0) {
        latestDelayMicros = (destinationMicros - originMicros) -
            (transmitMicros - receiveMicros);
        latestOffsetMicros = ((receiveMicros - originMicros) +
                       (transmitMicros - destinationMicros)) / 2;
    }

    // Discard the oldest sample and push the new one.
    if (this.samples.length == kMaxOffsetAge+1) {
        this.samples.shift();
    }
    this.samples.push({
        delayMicros : latestDelayMicros,
        offsetMicros : latestOffsetMicros,
    });
    this.currentOffsetAge++;

    // Update the local store with this new sample.
    if (this.state.options().service_host) {
        this.platform.localStore(
            kLocalStoreKey + "/" + this.state.options().service_host,
            JSON.stringify({
                timestamp_micros : this.platform.nowMicros(),
                samples : this.samples,
            })
        );
    }
    this.update();
};

// Update the time offset based on the current samples.
ClockState.prototype.update = function() {
    // This is simplified version of the clock filtering in Simple
    // NTP. It ignores precision and dispersion (frequency error). In
    // brief, it keeps the 8 (kMaxOffsetAge+1) most recent
    // delay-offset pairs, and considers the offset with the smallest
    // delay to be the best one. However, it only uses this new offset
    // if the change (relative to the last offset) is small compared
    // to the estimated error.
    //
    // See:
    // https://tools.ietf.org/html/rfc5905#appendix-A.5.2
    // http://books.google.com/books?id=pdTcJBfnbq8C
    //   esp. section 3.5
    // http://www.eecis.udel.edu/~mills/ntp/html/filter.html
    // http://www.eecis.udel.edu/~mills/database/brief/algor/algor.pdf
    // http://www.eecis.udel.edu/~mills/ntp/html/stats.html

    // TODO: Consider huff-n'-puff if we think the delays are highly
    // asymmetric.
    // http://www.eecis.udel.edu/~mills/ntp/html/huffpuff.html

    // Find the sample with the smallest delay; the corresponding
    // offset is the "best" one.
    var minDelayMicros = Number.MAX_VALUE;
    var bestOffsetMicros = 0;
    for (var i = 0; i < this.samples.length; i++) {
        if (this.samples[i].delayMicros < minDelayMicros) {
            minDelayMicros = this.samples[i].delayMicros;
            bestOffsetMicros = this.samples[i].offsetMicros;
        }
    }

    // No update.
    if (bestOffsetMicros == this.currentOffsetMicros) {
        return;
    }

    // Now compute the jitter, i.e. the error relative to the new
    // offset were we to use it.
    var jitter = 0;
    for (i = 0; i < this.samples.length; i++) {
        jitter += Math.pow(bestOffsetMicros - this.samples[i].offsetMicros, 2);
    }
    jitter = Math.sqrt(jitter / this.samples.length);

    // Ignore spikes: only use the new offset if the change is not too
    // large... unless the current offset is too old. The "too old"
    // condition is also triggered when update() is called from the
    // constructor.
    var kSGATE = 3; // See RFC 5905
    if (this.currentOffsetAge > kMaxOffsetAge ||
        Math.abs(this.currentOffsetMicros - bestOffsetMicros) < kSGATE * jitter) {
        this.currentOffsetMicros = bestOffsetMicros;
        this.currentOffsetAge = 0;
    }
};

// Returns the difference in microseconds between the server's clock
// and our clock. This should be added to any local timestamps before
// sending them to the server. Note that a negative offset means that
// the local clock is ahead of the server's.
ClockState.prototype.offsetMicros = function() {
    return this.currentOffsetMicros | 0;
};

// Returns true if we've performed enough measurements to be confident
// in the current offset.
ClockState.prototype.isReady = function() {
    return this.samples.length > 3;
};

ClockState.prototype.activeSamples = function() {
    return this.samples.length;
};

module.exports = ClockState;

},{}],13:[function(require,module,exports){
// The build process will override this to false in minified distributions
// and strip any dead code that results.
var DEBUG = true; 

//===========================================================================//
// Memory Management
//===========================================================================//

function ObjectPool(opts) {
    var reserveCount = opts.reserve || 32;

    this._ctor = opts.constructor;
    this._reset = opts.object_reset;
    this._pop_front = opts.pop_front || false;

    this.allocationCount = 0;
    this.acquireCount = 0;
    this.releaseCount = 0;
    this.freeList = new Array(reserveCount);

    for (var i = 0; i < reserveCount; i++) {
        this.freeList[i] = this.newObject();
    }
}

ObjectPool.prototype.newObject = function() {
    this.allocationCount++;
    return new (this._ctor)();
};

ObjectPool.prototype.acquire = function(args) {
    this.acquireCount ++;
    var obj;
    if (this.freeList.length) {
        obj = this.freeList.pop();
    } else {
        obj = this.newObject();
    }
    this._reset(obj, args);
    return obj;
};

ObjectPool.prototype.release = function(obj) {
    if (obj === undefined || obj === null) {
        if (DEBUG) {
            console.assert(false, "Attempt to release an invalid object.");
        }
        return;
    }

    if (DEBUG) {
        console.assert(this.acquireCount >= this.releaseCount, "Imbalance in acquire/release counts!");
    }
    this.releaseCount ++;
    this._reset(obj);
    this.freeList.push(obj);
};

// Effectively reinitializes the pool by reseting counters and reseting
// the free list.  Existing objects, of course, still exist and will
// be GC'ed normally.
ObjectPool.prototype.reset = function() {
    this.allocationCount = 0;
    this.acquireCount = 0;
    this.releaseCount = 0;
    this.freeList = [];
};

module.exports = ObjectPool;

},{}],14:[function(require,module,exports){
// The build process will override this to false in minified distributions
// and strip any dead code that results.
var DEBUG = true;

//===========================================================================//
// Memory Management
//===========================================================================//

var kSpanHandlesPoolInitialSize = 32;

var ObjectPool = require("./object_pool.js");

var pool = {
    spanHandles : new ObjectPool({
        constructor  : SpanHandle,
        initial_size : kSpanHandlesPoolInitialSize,
        object_reset : function(obj, args) {
            this._record = null;
            this._state = null;
            this._id = 0;
        },
    }),
};

var gIdCounter = 1;         // Start at 1 so 0 means not a valid, active handle
var gActiveSpansById = {};

//===========================================================================//
// SpanHandle
//===========================================================================//
//
// A handle exposing an active span to the client.
//
// Terminology: the "span record" is the data associated with a completed
// span and the "span handle" is the interface for interacting with an active
// span.
//
// Dev note: this interface should mirror the cruntime API (where common sense
// applies).
//

/**
    Interface for manipulating an active span object.
 */
function SpanHandle(state, record) {
    // Don't call release() on _record as this is non-owning reference.
    this._record = record;
    this._state = state;

    // Internal identifier; useful for tracking unclosed spans
    this._id = gIdCounter++;
}


/**
    @group Properties
    @signature guid() -> string

    * `return` string - the globally unique identifier for the span instance.
 */
SpanHandle.prototype.guid = function() {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
        return 0;
    } else {
        return this._record.span_guid;
    }
};


/**
    @group Properties
    @signature valid() -> bool

    Returns true if the span handle is valid; false if `end()` has already been
    called.

    * `return` bool - false if the span has already been ended
 */
SpanHandle.prototype.valid = function() {
    return !!this._record;
};

/**
    @group Configuration & Control
    @signature end()

    Ends the span.  This should be called exactly once for every created span
    object.
 */
SpanHandle.prototype.end = function() {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
        return;
    }
    if (DEBUG) {
        console.assert(this._record.span_guid !== null, "Span requires a GUID");
        console.assert(this._record.youngest_micros === null, "span end() has already been called");
    }

    if (this._record.youngest_micros === null) {
        this._record.youngest_micros = this._state.nowMicros();
        this._state.pushSpanRecord(this._record);
        this._record = null;
        delete gActiveSpansById[this._id];
        pool.spanHandles.release(this);
    } else {
        logUserError(this._state, "Span closed twice");
    }
};



SpanHandle.prototype.name = function(newName) {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
        return;
    } else {
        if (newName === undefined) {
            // accessor
            return this._record.span_name;
        } else {
            // mutator
            this._record.span_name = newName;
        }
    }
};

/**
    @group Configuration & Control
    @signature operation() -> string
    @signature operation(name)

    Accessor and mutator for the name of the span operation.

    * `name` string - name of the operation
    * `return` string - current name of the operation
 */
SpanHandle.prototype.operation = SpanHandle.prototype.name;


/**
    @group Configuration & Control
    @signature attributes() -> object
    @signature attributes(key, value) -> SpanHandle
    @signature attributes(attrs) -> SpanHandle

    Called with no arguments, returns the current set of span attributes
    as a key-value pair map.

    Called with two arguments, sets the given key value pair. Any existing
    key-value with that key will be replaced.

    Called with an object, the object will be treated as a set of
    key-value pairs to merge into the span attributes.

    All values will be converted to strings when stored as an attribute.
 */
SpanHandle.prototype.attributes = function() {
    var attrs;

    // Accessor
    if (arguments.length === 0) {
        if (!this._record) {
            logUserError(this._state, "Invalid span handle", arguments);
            return {};
        }
        attrs = {};
        for (var i = 0; i < this._record.attributes.length; i++) {
            var pair = this._record.attributes[i];
            attrs[pair.Key] = pair.Value;
        }
        return attrs;
    }

    // Mutator
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
        return {};
    }
    if (arguments.length === 1) {
        attrs = arguments[0];
    } else if (arguments.length === 2) {
        var keyType = typeof arguments[0];
        if (keyType !== "number" && keyType !== "string") {
            logUserError(this._state, "Invalid arguments", arguments);
            return this;
        }
        attrs = {};
        attrs[arguments[0]] = arguments[1];
    } else {
        logUserError(this._state, "Invalid arguments", arguments);
        return this;
    }
    if (typeof attrs !== "object" || !attrs) {
        logUserError(this._state, "Invalid arguments", arguments);
        return this;
    }
    this._state.mergeAttributesIntoSpanRecord(this._record, attrs);
};

// Wrap a function and end the span as soon as that function is invoked.
// Useful for asynchronous done/complete/next callbacks.
//
// Example:
//
// var span = cr.span("read_my_file")
// fs.readFile("my_file.txt", span.endWrap(function (err, buf) {
//     ...
// }));
//
SpanHandle.prototype.endWrap = function(f) {
    var self = this;
    return function() {
        self.end();
        var r;
        try {
            r = f.apply(this, arguments);
        } catch (e) {
            self.exception(e);
            throw e;
        }
        return r;
    };
};

/**
    @group Configuration & Control
    @signature joinIds () -> object
    @signature joinIds (joinIds)

    Accessor and mutator for the join IDs set on the span instance.
    When modifying the existing join IDs, the method will *merge*
    additional join IDs into the existing set of join IDs.

    If called with no arguments, it returns the current set of join IDs as
    an object.

    * `joinIds` object - the set of key-value pairs to merge into the existing
        join IDs
    * `return` object - the existing set of key-value pairs for the join IDs
 */
SpanHandle.prototype.joinIds = function (joinIds) {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
        return {};
    }

    // Accessor
    if (joinIds === undefined) {
        var map = {};
        joinIds = this._record.join_ids;
        for (var i = 0; i < joinIds.length; i++) {
            var pair = joinIds[i];
            map[pair.TraceKey] = pair.Value;
        }
        return map;
    }

    // Mutator
    this._state.mergeJoinIdMapIntoSpanRecord(this._record, joinIds);
};

//===========================================================================//
// Spans
//===========================================================================//

/**
    @group Sub-spans
    @signature span(operation, joinIds, callthrough) -> any
    @signature span(operation, callthrough) -> any
    @signature span(operation, joinIds) -> SpanHandle
    @signature span(operation) -> SpanHandle

    Create a sub-span.  The newly created span inherits the join IDs of the
    outer span object.

    Note: the span does *not* inherit the "active" join IDs and instead trusts
    that the outer span object creating the new span has the intended join IDs.

    * `operation` string - name to assign to the span operation
    * `joinId` object - key-value pairs to use on the sub-span
    * `callthrough` function(spanHandle) : any - a function that will be
    called with the newly created spanHandle.  The return value of this
    callthrough will become the return value of the outer `span()` call.
    * `return` [any|SpanHandle] - if a callthrough is provided, the return
    value of span() will be the return value of the callthrough. Otherwise, the
    return value is the handle to the newly created span.

    :::mark
    The `callthrough` concept is confusing and the value is unclear. It does
    have value (it sets the span object as active in the internal active
    span set, which allows other instrumented code to "find" the current span
    without explicit knowledge of the caller) but this is difficult to explain
    without introducing new, non-trivial concepts.
    :::
*/
SpanHandle.prototype.span = function (name, joinIdKeyValues, callthrough) {

    if (arguments.length === 2 && typeof joinIdKeyValues === "function") {
        callthrough = joinIdKeyValues;
        joinIdKeyValues = null;
    }

    var inner;
    var handle;
    if (!this._record) {
        // If this is an invalid handle, still create a new handle even if it
        // isn't associated with the invalid parent.
        logUserError(this._state, "Invalid span handle", arguments);
        inner = this._state.rawSpanBegin(name, joinIdKeyValues);
        handle = this._state.createSpanHandle(inner);
    } else {
        var joinIds = mergeTraceIds(this._record.join_ids, joinIdKeyValues);
        inner = this._state.rawSpanBegin(name, joinIds);
        handle = this._state.createSpanHandle(inner);
        handle.attributes("parent_span_guid", this._record.span_guid);
    }

    if (callthrough) {
        return this._state.setActiveSpan(handle, null, [ handle ], callthrough);
    } else {
        return handle;
    }
};

SpanHandle.prototype.spanSection = function (name, joinIdKeyValues, f) {
    if (arguments.length === 2) {
        f = joinIdKeyValues;
        joinIdKeyValues = {};
    }
    var joinIds = mergeTraceIds(this._record.join_ids, joinIdKeyValues);
    return this._state.spanSection(name, joinIds, f);
};

//===========================================================================//
// console-style logging
//===========================================================================//

/**
    @group Logging

    Adds a log statement that is explicitly associated with the
    span instance.
 */
SpanHandle.prototype.log = function() {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
    } else {
        this._state.logArgumentsInfo(arguments, this._record.span_guid);
    }
};

/**
    @group Logging

    Adds a log statement that is explicitly associated with the
    span instance.
 */
SpanHandle.prototype.info = SpanHandle.prototype.log;

/**
    @group Logging

    Adds a warning log statement that is explicitly associated with the
    span instance.
 */
SpanHandle.prototype.warn = function() {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
    } else {
        this._state.logArgumentsWarn(arguments, this._record.span_guid);
    }
};

/**
    @group Logging

    Adds a error log statement that is explicitly associated with the
    span instance.
 */
SpanHandle.prototype.error = function() {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
    } else {
        // Denote the span contains an error.
        this._record.error_flag = true;
        this._state.logArgumentsError(arguments, this._record.span_guid);
    }
};

/**
    @group Logging

    Adds a fatal log statement that is explicitly associated with the
    span instance.

    Note: `fatal` will cause the process to exit on a Node.js-like platform.
    On the browser, it is equivalent an error and processing is not explicitly
    stopped.
 */
SpanHandle.prototype.fatal = function() {
    // The implementation of fatal intentionally differs from info/warn/error
    // on a bad record: take the fatal seriously and pass it on to the state
    // object.
    var guid;
    if (this._record) {
        this._record.error_flag = true;
        guid = this._record.span_guid;
    } else {
        logUserError(this._state, "Invalid span handle", arguments);
    }
    this._state.logArgumentsFatal(arguments, guid);
};

//===========================================================================//
// glog-style logging
//===========================================================================//

SpanHandle.prototype.logf = function() {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
    } else {
        this._state.logFormattedInfo(arguments, this._record.span_guid);
    }
};

SpanHandle.prototype.infof = SpanHandle.prototype.logf;

SpanHandle.prototype.warnf = function() {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
    } else {
        this._state.logFormattedWarn(arguments, this._record.span_guid);
    }
};

SpanHandle.prototype.errorf = function() {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
    } else {
        this._record.error_flag = true;
        this._state.logFormattedError(arguments, this._record.span_guid);
    }
};

SpanHandle.prototype.fatalf = function() {
    // The implementation of fatal intentionally differs from info/warn/error
    // on a bad record: take the fatal seriously and pass it on to the state
    // object.
    var guid;
    if (this._record) {
        guid = this._record.span_guid;
        this._record.error_flag = true;
    } else {
        logUserError(this._state, "Invalid span handle", arguments);
    }
    this._state.logFormattedFatal(arguments, guid);
};

SpanHandle.prototype.exception = function(e) {
    var guid;
    if (this._record) {
        guid = this._record.span_guid;
        this.error_flag = true;
    } else {
        logUserError(this._state, "Invalid span handle", arguments);
    }
    this._state.logException(arguments, guid);
};

SpanHandle.prototype.logRecord = function(fields) {
    if (this._record) {
        fields.span_guid = this._record.span_guid;
        if (fields.error_flag || fields.level == "E" || fields.level == "F") {
            this._record.error_flag = true;
        }
    } else {
        logUserError(this._state, "Invalid span handle", arguments);
    }
    this._state.logRecord(fields);
};

//===========================================================================//
// Events
//===========================================================================//

// Valid call signatures:
//
// event(name)
// event(name, message)
// event(name, payload)
// event(name, message, payload)
//
SpanHandle.prototype.event = function(name, message, payload) {
    if (!this._record) {
        logUserError(this._state, "Invalid span handle", arguments);
    } else {

        // The two-argument call signature is the only case that requires
        // parameter shuffling
        if (arguments.length === 2 && typeof message === "object") {
            payload = message;
            message = undefined;
        }
        this._state.logEventWithGUID(name, message, payload, this._record.span_guid);
    }
};

//===========================================================================//
// Helpers
//===========================================================================//

// For user-caused internal errors.
function logUserError (state, text, args) {
    state.rawLogRecord({
        level       : "E",
        error_flag  : true,
        filename    : "<span_handle>",
        message     : text,
        stack_frames: state.stackTrace(),
        payload     : {
            arguments : Array.prototype.slice.call(args),
        },
    });
}

// Merges the parent array representation with a map and returns a map.
// parentArray should an array; toMerge should be a map or may be undefined.
//
// TODO: fix this data structure ping-pong!
 function mergeTraceIds (parentArray, toMerge) {
    var map = {};
    for (var i = 0; i < parentArray.length; i++) {
        var pair = parentArray[i];
        map[pair.TraceKey] = pair.Value;
    }
    if (toMerge) {
        for (var key in toMerge) {
            map[key] = toMerge[key];
        }
    }
    return map;
}


//===========================================================================//
// NoOpHandle
//===========================================================================//
// Returned when the cruntime is disabled

function NoOpHandle() {
    // MUST have no state as the object is effectively used as a
    // singleton.
}

// Create true no-op functions as a default, then override the methods
// that need to do something beyond trace functionality.
for (var key in SpanHandle.prototype) {
    NoOpHandle.prototype[key] = function() {};
}

NoOpHandle.prototype.endWrap = function(f) {
    return f;
};

NoOpHandle.prototype.span = function (name, joinIdKeyValues, f) {
    if (arguments.length === 2 && typeof joinIdKeyValues === "function") {
        f = joinIdKeyValues;
        joinIdKeyValues = null;
    }

    if (f) {
        return f(this);
    }
    return this;
};

NoOpHandle.prototype.spanSection = function (name, joinIdKeyValues, f) {
    if (arguments.length === 2) {
        f = joinIdKeyValues;
    }
    return f();
};

//===========================================================================//
// Exports
//===========================================================================//

var lib = {};

lib.acquire = function(state, record) {
    var obj = pool.spanHandles.acquire();
    SpanHandle.call(obj, state, record);
    gActiveSpansById[obj._id] = obj;
    return obj;
};

lib.activeSpanHandles = function() {
    var active = [];
    for (var id in gActiveSpansById) {
        active.push(gActiveSpansById[id]);
    }
    return active;
};

lib.isSpanHandle = function(obj) {
    return (obj instanceof SpanHandle);
};

var gNoOpHandle = new NoOpHandle();
lib.getNoOpHandle = function() {
    return gNoOpHandle;
};

module.exports = lib;

},{"./object_pool.js":13}],15:[function(require,module,exports){
//===========================================================================//
// Dependencies & Consts
//===========================================================================//

var ObjectPool       = require("./object_pool.js"),
    span_handle      = require("./span_handle.js"),
    ClockState       = require("./clock_state.js"),
    TimestampSamples = require("./timestamp_samples.js"),
    makeInspectable  = require("node/packages/rl-inspectable-object"),
    scrubber         = require("node/packages/rl-scrubber"),
    EventEmitterMin  = require("node/packages/rl-eventemitter");

// The build process will override this to false in minified distributions
// and strip any dead code that results.
var DEBUG = true;

var kLogRecordsPoolInitialSize  = 128;
var kSpanRecordsPoolInitialSize = 32;
var kTraceJoinIdPoolInitialSize = 64;
var kKeyValuePoolInitialSize    = 64;

var kMaxLogRecordsDefault          = 1024;
var kMaxSpanRecordsDefault         = 1024;
var kRefreshIntervalMsDefault      = 2500;
var kClockSamplingIntervalMs       = 350;

// This should be *rare* or never occur, so a large number here makes
// some sense. While this comment will surely fall out of date,
// currently 32 implies discard once every 1.5 hours given the backoff
// and default refresh interval.
var kDiscardDataEveryNthFlushError = 32;

// Another precaution against a not well-defined case: recreate the thrift
// client objects after N errors, assuming somehow its internal state is
// blocking successful flushes.  The unreliable, unpredictable error handling
// of Thrift has given rise to this precaution.  Note: recreating the client
// appears to "safe" but wasteful operation in the 0.9.2 Thrift JS library.
var kResetConnectionEveryNthFlushError = 10;

// Rules that are always active in the scrubber -- intended for removing
// traceguide internal information.
var kBaselineScrubberRules = [
    {
        match        : [ "keys", "url_query_string" ],
        op           : "remove",
        key_prefixes : [ "traceguide_" ],
    }
];

// Intended as a reasonable set of defaults for scrubbing customer data.
var kDefaultScrubbersRules = [
    {
        match       : "keys",
        op          : "remove",
        keys        : [ "password", "api_key" ],
    },
];

// Returned in cases when the clock state is not ready (and the
// request should be retried).
var kClockStateNotReadyError = new Error("clock state not ready");

//===========================================================================//
// Globals
//===========================================================================//
// Use globals mostly for coding convenience.  No runtime is (currently)
// expected to have multiple State objects; this may change in the future.

// State object
var singleton       = null;

// Thrift
var crouton_thrift  = null;
var Thrift          = null;

// Memory management
var pool = {
    logRecords      : null,
    spanRecords     : null,
    traceJoinIds    : null,
};

// Platform abstraction layer
var platform        = null;

// Saved global state in case we're asked to override it
var originalConsole = console;
var originalConsole_log = originalConsole.log;
var originalConsole_warn = originalConsole.warn;
var originalConsole_error = originalConsole.error;

// Ensure a conditional occurs not more than once
_onceMap = {};
function _once(key) {
    var alreadySet = !!_onceMap[key];
    _onceMap[key] = true;
    return !alreadySet;
}

function _log()   { return originalConsole_log.apply(originalConsole, arguments); }
function _warn()  { return originalConsole_warn.apply(originalConsole, arguments); }
function _error() { return originalConsole_error.apply(originalConsole, arguments); }

function initializeGlobals(state, crouton_thrift_, Thrift_, platform_) {
    //
    // Singleton...
    //
    // This is mostly for coding convenience. In theory, we may want to
    // to have less global state when proxying different services so that
    // the runtime attributes, buffering strategies, etc. can vary between
    // those data sources.
    //
    if (singleton !== null) {
        throw new Error("State is intended to be a singleton.");
    }
    singleton = state;

    //
    // Platform...
    //
    platform = platform_;

    //
    // Thrift...
    //
    crouton_thrift = crouton_thrift_;
    Thrift         = Thrift_;

    //
    // Memory Pools...
    //
    // These rely on the thrift implementation to clear out all the fields.
    // Seems a bit fragile, but manually listing out the fields and clearing
    // them is also fragile if new fields are added.
    pool.logRecords = new ObjectPool({
        constructor  : crouton_thrift.LogRecord,
        initial_size : kLogRecordsPoolInitialSize,
        object_reset : function(obj, args) { crouton_thrift.LogRecord.call(obj, args); },
    });
    pool.spanRecords = new ObjectPool({
        constructor  : crouton_thrift.SpanRecord,
        initial_size : kSpanRecordsPoolInitialSize,
        object_reset : function(obj, args) { crouton_thrift.SpanRecord.call(obj, args); },
    });
    pool.traceJoinIds = new ObjectPool({
        constructor  : crouton_thrift.TraceJoinId,
        initial_size : kTraceJoinIdPoolInitialSize,
        object_reset : function(obj, args) { crouton_thrift.TraceJoinId.call(obj, args); },
    });
    pool.keyValue = new ObjectPool({
        constructor  : crouton_thrift.KeyValue,
        initial_size : kKeyValuePoolInitialSize,
        object_reset : function(obj, args) { crouton_thrift.KeyValue.call(obj, args); },
    });
}

function releaseSpanRecord (span) {
    if (DEBUG) {
        console.assert(span.span_guid !== null, "Invalid span being released.");
    }
    if (span.join_ids) {
        for (var j = 0; j < span.join_ids.length; j++) {
            pool.traceJoinIds.release(span.join_ids[j]);
        }
    }
    if (span.attributes) {
        for (var k = 0; k < span.attributes.length; k++) {
            pool.keyValue.release(span.attributes[k]);
        }
    }
    pool.spanRecords.release(span);
}

// Balance the acquire()'ed objects with release() calls.
function releaseArrays (logs, spans) {
    // Release log record objects
    for (var i = 0; i < logs.length; i++) {
        pool.logRecords.release(logs[i]);
    }
    // Release span record object and any contained join ids
    for (i = 0; i < spans.length; i++) {
        releaseSpanRecord(spans[i]);
    }
}

// TODO: this is intended to be a reasonable short-term solution, nothing more.
function defaultServiceHost() {
    return "api.traceguide.io";
}

function defaultServicePort() {
    // TODO: must be explicit about http/https.
    return 9997;
}

// Returns true if all elements in array "a" are of type string.
// Returns true for empty arrays.
function allElementsAreStrings(a) {
    for (var i = 0; i < a.length; i++) {
        if (typeof a[i] !== "string") {
            return false;
        }
    }
    return true;
}

//===========================================================================//
// State
//===========================================================================//

function State(thriftTypes, thriftLibrary, platform, eventHandlers) {
    EventEmitterMin.call(this);

    initializeGlobals(this, thriftTypes, thriftLibrary, platform);

    var now = platform.nowMicros();

    // Set up event handlers immediately, as some are invoked during creation
    for (var key in eventHandlers) {
        this.on(key, eventHandlers[key]);
    }

    // Handle to the client-api.  Set externally by the API creation code.
    this.api = null;

    // Configuration
    this.serviceHost = defaultServiceHost();
    this.servicePort = defaultServicePort();
    this.certificateVerification = true;
    this.bufferMaxSpanRecords    = kMaxSpanRecordsDefault;
    this.bufferMaxLogRecords     = kMaxLogRecordsDefault;
    this.refreshIntervalMs       = kRefreshIntervalMsDefault;
    this.logToStdio              = false;
    this.debug                   = false;  // "debug" relates to the HTML debug overlay
    this.verbose                 = false;  // "verbose" sets vastly increased internal logging
    this.handle_uncaught_excepton= false;  // See options() handle_uncaught_exception
    this.autoinstrument          = false;  // Inject instrumentation into common libraries.
                                           // This likely should be a library-by-library opt-in.
    this.automonitor             = false;  // Periodically poll & log system stats
    this.disableClockCorrection  = false;  // Don't try to adjust for client-service clock offset.

    // Thrift runtime object and client object
    this.runtime = new crouton_thrift.Runtime();
    this.runtime.guid = "";
    this.runtime.group_name = "";
    this.runtime.start_micros = now;

    // Thrift client object - initialized at the start of the refresh loop
    this.client     = null;
    this.auth       = new crouton_thrift.Auth();
    this.connection = null;  // <-- Only set for node.js (the asymmetry is not ideal, but needed)

    // Model of clock skew between client and server
    this.clockState = null;

    // Payload scrubber
    this.scrub      = null;         // Initialized in options()

    // Status
    this.initialized = false;
    this.shuttingDown = false;
    this.connectionOk = false;          // False if a reconnect is needed for any reason
    this.refreshLoopActive = false;
    this.flushActive = false;
    this.flushErrorCount = 0;           // Consecutive errors from report calls (for back-off purposes)
    this.flushNonConnectErrorCount = 0; // Consecutive errors *known* not to be connection errors
    this.flushTimer = null;

    // More general counter indicating that cruntime is currently in the call stack
    // doing work, such as scrubbing a log; used as a signal to avoid unintended
    // recursion such as logging a console.log() call that was (somehow) triggered
    // while creating a different log record.
    this.cruntimeActive = 0;

    // The cruntime allows the active span handle OR active join IDs to be
    // tracked. Both type of objects may be on this stack. The code does not
    // simply store the join IDs of a span being pushed here as, if the span
    // handle is stored it's possible check that if the span has been end()'ed,
    // which avoids some set of false positive trace joins.
    this.activeSpanOrJoinIDsStack = [];

    // Runtime info
    this.enabled    = true; // If false, turn the runtime into as close to a noop as possible
    this.joinIds    = {};   // Global join ids that will be inherited by all spans

    // Buffers
    this.reportOldestMicros   = now;
    this.reportYoungestMicros = now;
    this.spans                = [];
    this.logs                 = [];
    this.discardedLogSamples  = new TimestampSamples(100, 3);

    // Reusable objects / object pools to reduce gc thrashing
    this.reusable = {
        reportRequest       : new crouton_thrift.ReportRequest(),
        status              : {},
    };

    // Report counters - reset on every successful report.
    //
    // The field names have a correspondence to the Go instrument/client
    // counter name constants (i.e. known counter names will be exposed
    // in the UI). Sending "unknown" counters is fine as well as the
    // server may eventually expose these and the client does not require
    // an update.
    this.counters = {
        dropped_logs         : 0,
        dropped_spans        : 0,

        // These obviously rely on a report eventually getting through!
        flush_with_no_data   : 0,
        flush_errors         : 0,
        flush_exceptions     : 0,
    };

    // Adapters on the client RPCs (due to asymmetry in the node / browser
    // thrift calling conventions).
    this.invokeReport = null;
    this.thriftHttpErrorCallback = null;    // <-- workaround for thrift code

    // Make the State object into a Facade that hides the platform differences
    //
    // TODO: eventually hide the need for an explicit isNode bool!
    //
    this.platform           = platform;
    this.logger             = null;
    this.processAbort       = null;

    // Initialize the default options
    this.options({
        scrubber            : null,     // <-- forces the default scrubber
        override_console    : true,
        override_logger     : null,
        override_abort      : null,
    });
}

// Inherit from EventEmitter
State.prototype = new EventEmitterMin();

// See the API initialize() documentation for details.
State.prototype.initialize = function (opts) {
    // The multiple initialization rule above is intentional based on the assumption
    // that well-defined initialization order to *not* something the cruntime should
    // require from all clients as that makes the cruntime harder to integrate.  The
    // above rule lets customers be a little more careless and still have it "just work".
    // No points for elegance; points for convenience.
    if (this.initialized) {
        // Treat redundant initialize calls as options() calls to merge any
        // and all options.
        this.options(opts);
        this.startFlushBufferLoopIfPossible(opts);
        return;
    }

    //
    // First initialization
    //
    this.emit("preinitialize", this.api);

    this.options(opts);
    this.startFlushBufferLoopIfPossible(opts);

    this.initialized = true;
    this.emit("postinitialize", this.api);
};

State.prototype.startFlushBufferLoopIfPossible = function(opts) {
    // Only start the reporting loop if there's an access token set and
    // if not explicitly paused.
    var paused = opts ? opts.paused : false;
    if (this.auth.access_token && !paused) {
        this.ensureFlushBufferLoopStarted();
    }
};

// TODO: the code does not support re-initializing after shutdown. While not a
// necessary feature, if the code was set up more elegantly, that would work
// implicitly.
State.prototype.shutdown = function() {
    if (!this.enabled) {
        return;
    }

    this.shuttingDown = true;

    // Emit the message before the final flush in case the client code wants to
    // record any final data
    this.emit("shutdown");

    // "Forcibly" close all unclosed spans with an error
    var spans = span_handle.activeSpanHandles();
    for (var i = 0; i < spans.length; i++) {
        var span = spans[i];
        span.error("Active span not closed:", span.name());
        span.end();
    }

    this.flushBuffer(true);
};

// Sets options on the runtime.  Returns the subset of "user-visible" options
// if called with no arguments.
State.prototype.options = function (opts) {
    var self = this;
    var key;

    // Act as an accessor if there are no arguments.
    if (arguments.length === 0) {
        return {
            enable                   : this.enabled,
            access_token             : this.auth.access_token,
            service_host             : this.serviceHost,
            service_port             : this.servicePort,
            group_name               : this.runtime.group_name,
            join_ids                 : this.joinIds,
            max_log_records          : this.bufferMaxLogRecords,
            max_span_records         : this.bufferMaxSpanRecords,
            debug                    : this.debug,
            // XXX nothing reasonable (?) for override_console
            refresh_interval_millis  : this.refreshIntervalMs,

            handle_uncaught_excepton : this.handle_uncaught_excepton,
            autoinstrument           : this.autoinstrument,
            automonitor              : this.automonitor,
        };
    }

    if (typeof opts !== "object") {
        this.logArgumentsError(["options called with a non-object argument"]);
    }

    //
    // enable {boolean}
    //
    if (typeof opts.enable !== "undefined") {
        this.setEnabled(opts.enable);

        // Special case for disable: ensure the
        if (!this.enabled) {
            opts.override_console = false;
        }
    }

    //
    // access_token {string}
    //
    if (typeof opts.access_token === "string") {
        this.auth.access_token = opts.access_token;
    }

    //
    // service_host {string}
    //
    // Sets the host use for reporting.
    //
    if (typeof opts.service_host === "string") {
        this.serviceHost = opts.service_host;
    }

    //
    // service_port {int|string}
    //
    // Sets the port use for reporting.
    //
    if (opts.service_port) {
        var port = parseInt(opts.service_port);
        this.servicePort = port;
    }

    //
    // group_name {string}
    //
    // Sets the runtime's group_name.
    //
    if (typeof opts.group_name === "string") {
        this.runtime.group_name = opts.group_name;
        // Also, set the guid.
        this.runtime.guid = String(this.platform.runtimeGUID(opts.group_name));

        // Emit an event so add-ons like the session join id.
        this.emit("options.set_group_name", this.api, this.runtime.group_name);
    }

    //
    // join_ids {object}
    //
    // A set of string-to-string key-value pairs to be set globally for the
    // runtime.  All created spans will inherit these join ids.
    //
    if (opts.join_ids !== undefined) {
        for (key in opts.join_ids) {
            var value = opts.join_ids[key];
            if (value !== undefined) {
                this.joinIds[key] = value;
            } else {
                delete this.joinIds[key];
            }
        }
    }

    //
    // max_log_records {int}
    //
    // Maximum number of log records to buffer. If the current buffer already
    // exceeds this size, the buffer size will not reset until the next
    // report.
    //
    // Setting to null will reset to the default value.
    //
    if (typeof opts.max_log_records === "number") {
        // Always buffer at least 1; this simplifies the runtime logic and the
        // client can always set "enable" to false.
        this.bufferMaxLogRecords = Math.max(opts.max_log_records, 1);
    } else if (opts.max_log_records === null) {
        this.bufferMaxLogRecords = kMaxLogRecordsDefault;
    }

    //
    // max_span_records {int}
    //
    // Maximum number of log records to buffer. If the current buffer already
    // exceeds this size, the buffer size will not reset until the next
    // report.
    //
    // Setting to null will reset to the default value.
    //
    if (typeof opts.max_span_records === "number") {
        // Always buffer at least 1; this simplifies the runtime logic and the
        // client can always set "enable" to false.
        this.bufferMaxSpanRecords = Math.max(opts.max_span_records, 1);
    } else if (opts.max_span_records === null) {
        this.bufferMaxSpanRecords = kMaxSpanRecordsDefault;
    }

    //
    // debug {bool}
    //
    // Should the instrumentation offer a way to debug the current interaction.
    // TODO browser only?
    //
    if (typeof opts.debug === "boolean") {
        this.debug = opts.debug;

        // Emit an event so add-ons like the debug overlay window can know to display
        // themselves or not.
        this.emit("options.set_debug", this.api, this.debug);
    }

    //
    // verbose {bool}
    //
    // If true, greatly increases the amount of internal and instrumented logging.
    //
    if (typeof opts.verbose === "boolean") {
        this.verbose = opts.verbose;
    }

    //
    // log_to_stdio {bool}, default = false
    //
    // Indicates whether or not cr.log/warn/error calls should be echoed to standard
    // output.
    if (typeof opts.log_to_stdio === "boolean") {
        this.logToStdio = opts.log_to_stdio;
    }

    //
    // override_console {bool}
    //
    // Override the global window.console / global.console object and pipe the
    // input through cruntime.  A value of `false` will reset the console object.
    if (opts.override_console !== undefined) {
        if (opts.override_console === true) {
            console.log   = function() {
                if (self.enabled && !self.flushActive && !self.cruntimeActive) {
                    self.logArgumentsInfo.call(self, arguments, undefined, true);
                } else {
                    originalConsole_log.apply(originalConsole, arguments);
                }
            };
            console.warn  = function() {
                if (self.enabled && !self.flushActive && !self.cruntimeActive) {
                    self.logArgumentsWarn.call(self, arguments, undefined, true);
                } else {
                    originalConsole_warn.apply(originalConsole, arguments);
                }
            };
            console.error = function() {
                if (self.enabled && !self.flushActive && !self.cruntimeActive) {
                    self.logArgumentsError.call(self, arguments, undefined, true);
                } else {
                    originalConsole_error.apply(originalConsole, arguments);
                }
            };
        } else {
            console.log   = originalConsole_log;
            console.warn  = originalConsole_warn;
            console.error = originalConsole_error;
        }
    }

    //
    // refresh_interval_millis {number}
    //
    // Set how frequently the cruntime reports to the service, in milliseconds.
    // If set to null, the cruntime will reset the report interval to its
    // internal default.
    //
    if (typeof opts.refresh_interval_millis === "number") {
        this.refreshIntervalMs = Math.max(0, opts.refresh_interval_millis);
    } else if (opts.refresh_interval_millis === null) {
        this.refreshIntervalMs = kRefreshIntervalMsDefault;
    }

    //
    // scrubber {object}
    //
    // Sets the options on the payload data scrubber. See rl-scrubber for documentation
    // on the scrubber options. If set to null, the scrubber will be reset to the
    // default configuration.
    //
    if (opts.scrubber === null) {
        this.scrub = scrubber.make({
            rules : [].concat(kBaselineScrubberRules, kDefaultScrubbersRules),
        });
    } else if (typeof opts.scrubber === "object") {
        // Ensure the baseline rules are always included so that traceguide internal
        // information is stripped from the payloads
        var scrubberConfig = {};
        for (key in opts.scrubber) {
            scrubberConfig[key] = opts.scrubber[key];
        }
        scrubberConfig.rules = kBaselineScrubberRules.concat(scrubberConfig.rules || []);
        this.scrub = scrubber.make(scrubberConfig);
    }

    //
    // certificate_verification {boolean}
    //
    // If false, informs the node https libraries not to do certification verification.
    // Useful for development environments.
    //
    if (opts.certificate_verification !== undefined) {
        this.certificateVerification = !!opts.certificate_verification;
    }

    //
    // certificate_verification {boolean}
    //
    // If true, in Node.js a handler for the process.on('uncaughtException') event
    // will be added to log and rethrow the exception.
    //
    // Disabled by default due to a customer report of this having side-effects.
    //
    if (opts.handle_uncaught_excepton !== undefined) {
        this.handle_uncaught_excepton = !!opts.handle_uncaught_excepton;
    }

    //
    // autoinstrument {boolean}
    //
    if (opts.autoinstrument !== undefined) {
        this.autoinstrument = !!opts.autoinstrument;
    }

    //
    // automonitor {boolean}
    //
    if (opts.automonitor !== undefined) {
        this.automonitor = !!opts.automonitor;
    }


    //
    // -- internal use only --
    //
    // cruntime_platform {string}
    //
    // Platform of the cruntime itself (i.e. node or browser and a x.x.x semantic
    // version string).
    if (typeof opts.cruntime_platform === "string") {
        this.replaceOrAddRuntimeKeyValue("cruntime_platform", opts.cruntime_platform);
    }

    //
    // -- internal use only --
    //
    // cruntime_platform {string}
    //
    // Semantic version of the cruntime itself (i.e. x.x.x style version string,
    // http://semver.org/).
    //
    if (typeof opts.cruntime_version === "string") {
        this.replaceOrAddRuntimeKeyValue("cruntime_version", opts.cruntime_version);
    }


    //
    // -- internal use only --
    //
    // reset_object_pools {bool}
    //
    // Reset the object pools, for testing test the memory usage
    //
    if (opts.reset_object_pools) {
        this.resetObjectPools();
    }

    //
    // -- internal use only --
    //
    // override_abort {function()}
    //
    // Allow the platform abort() function to be overridden for testing.
    // Setting a value of `null` will revert back to the platform abort()
    // implementation.
    //
    if (opts.override_abort !== undefined) {
        if (typeof opts.override_abort === "function") {
            this.processAbort = opts.override_abort;
        } else {
            this.processAbort = function() { return this.platform.abort(); };
        }
    }

    //
    // -- internal use only --
    //
    // override_logger {object}
    //
    // Allow the platform console to be overridden for testing purposes.
    // The override is *not* a 1:1 mapping to the normal logger. Instead it
    // simplifies things down to a single function as this is for basic
    // testing.
    if (opts.override_logger !== undefined) {

        var f = opts.override_logger;
        if (typeof f == "function") {

            // Create a very simple logger proxy.
            var g = function(args) {
                return f(args.join(" "));
            };
            this.logger = {
                info  : g,
                warn  : g,
                error : g,
                fatal : g,
            };

        } else {
            this.logger = this.platform.logger;
        }
    }

    //
    // -- internal use only --
    //
    // override_report_rpc {function(synchornous, request, callback(err, response))}
    //
    // Allow the reporting function to be overridden for testing.
    if (opts.override_report_rpc !== undefined) {
        if (typeof opts.override_report_rpc === "function") {
            this.invokeReport = opts.override_report_rpc;
        } else if (this.client) {
            // If there's a thrift client, connect back to the RPC
            this.invokeReport = this.createAsyncRPCAdapter(this.client.Report, crouton_thrift.ReportResponse);
        } else {
            // Otherwise, leave in the unconnected state
            this.invokeReport = null;
        }
    }

    //
    // -- internal use only --
    //
    // disable_clock_correction {boolean}
    //
    // Turn off automatic clock correction.
    if (opts.disable_clock_correction !== undefined) {
        this.disableClockCorrection = !!opts.disable_clock_correction;
    }
};

State.prototype.nowMicros = function() {
    // Coerce the value to an integer by OR'ing with zero as a
    // precaution given various platform timer implementation differences.
    return Math.floor(this.platform.nowMicros());
};

State.prototype.generateGUID = function() {
    return this.platform.generateGUID();
};

State.prototype.stackTrace = function() {
    return this.platform.stackTrace();
};

State.prototype.defaultLogFilename = function() {
    return this.platform.defaultLogFilename();
};

State.prototype.replaceOrAddRuntimeKeyValue = function(key, value) {
    var keyValue = new crouton_thrift.KeyValue();
    keyValue.Key = "" + key;    // Coerce to a string
    if (typeof value !== "string") {
        try {
            value = JSON.stringify(value);
        }
        catch (e) {
            value = "" + value;
        }
    }
    keyValue.Value = value;

    if (!this.runtime.attrs) {
        this.runtime.attrs = [];
    }
    for (var i = 0; i < this.runtime.attrs.length; i++) {
        var attr = this.runtime.attrs[i];
        if (attr.Key == key) {
            break;
        }
    }

    // JS reminder: setting to array[length] is the same as array.push(),
    // so this works for both the replace and insert cases.
    this.runtime.attrs[i] = keyValue;
};

State.prototype.runtimeAttributes = function (attrs) {
    // Getter
    if (arguments.length === 0) {
        var map = {};
        for (var i = 0; i < this.runtime.attrs.length; i++) {
            var attr = this.runtime.attrs[i];
            map[attr.Key] = attr.Value;
        }
        return map;
    }

    // Setter
    if (typeof attrs !== "object") {
        // TODO: Some internal warning/error API is needed
        if (DEBUG) {
            console.assert(false, "Unexpected attrs value");
        }
        return;
    }
    for (var key in attrs) {
        this.replaceOrAddRuntimeKeyValue(key, attrs[key]);
    }
};

State.prototype.runtimeGUID = function() {
    return this.runtime.guid;
};

State.prototype.setEnabled = function(enable) {
    // Coerce into a bool
    enable = !(!enable || (enable === "false" ? true : false));
    if (this.enabled === enable) {
        return;
    }

    this.enabled = enable;

    if (!enable) {
        // Respect the "turn this off!" command ASAP. Don't try to flush the
        // buffers -- discard 'em.
        this.discardBuffers();
    }
};

State.prototype.getEnabled = function() {
    return this.enabled;
};

State.prototype.getVerbose = function() {
    return this.verbose;
};


State.prototype.getStatus = function() {
    var status = this.reusable.status;
    status.enabled = this.enabled;
    status.flushActive = this.flushActive;
    return status;
};

//===========================================================================//
// Buffer / refresh loop
//===========================================================================//

// TODO: localStorage -- currently trying to force the RPC through on the
// beforeunload event doesn't seem to be working consistently.  Another option
// might be to stash the pending buffer into localStorage, and for the case
// where they are navigating to another page on the same site, they new page
// could then pick up that buffer on load and send it along.
//
State.prototype.flushBuffer = function(synchronous, done) {
    var self = this;
    done = done || function(err) {};

    // Early out if there's nothing to do or waiting on an existing flush
    if (!this.enabled) {
        return done();
    }

    if (this.flushActive) {
        return done();
    }
    if (!this.runtime.group_name) {
        return done();
    }
    if (!this.runtime.guid) {
        if (DEBUG) {
            _error("runtime.group_name is set but runtime.guid is invalid!");
        }
        return done();
    }

    this.ensureClockStateInitialized();

    // Save the current offset in case we need to undo this correction
    // (i.e. if we were to put them back in the queue).
    var timeOffsetMicros = 0;
    var clockReady = this.disableClockCorrection || this.clockState.isReady();
    if (!this.disableClockCorrection) {
        timeOffsetMicros = this.clockState.offsetMicros();
        this.logEvent("cr/time_correction_state", {
            "offset_micros" : timeOffsetMicros,
            "active_samples" : this.clockState.activeSamples(),
            "ready" : clockReady,
        });
    }

    if (clockReady && this.logs.length === 0 && this.spans.length === 0) {
        this.counters.flush_with_no_data++;
        return done();
    }

    this.ensureClientConnectionStarted();
    var req = this.reusable.reportRequest;

    // Allow a synchronous request as an option for the unload case where
    // we really want to cram that data across the wire before the user
    // leaves the page!
    synchronous = synchronous || false;

    // Only send the data if the clock is corrected or if this is "synchronous."
    var sendLogsAndSpans = clockReady || synchronous;
    if (sendLogsAndSpans) {
        req.span_records = this.spans;
        req.log_records = this.logs;
    } else {
        req.span_records = [];
        req.log_records = [];
    }

    // Set the runtime_guid here as log records may come in during the
    // cruntime initialization, whereas the GUID is definitely set by the
    // first flush operation
    var guid = this.runtime.guid;
    var i;
    for (i = 0; i < req.log_records.length; i++) {
        req.log_records[i].runtime_guid = guid;
    }
    for (i = 0; i < req.span_records.length; i++) {
        req.span_records[i].runtime_guid = guid;
    }

    this.reportYoungestMicros = this.nowMicros();

    req.runtime = this.runtime;
    req.timestamp_offset_micros = timeOffsetMicros;
    req.oldest_micros = this.reportOldestMicros;
    req.youngest_micros = this.reportYoungestMicros;

    // Convert the discarded log record sample counts to thrift
    //
    // TODO: convert this code to use ReportRequest.counters
    //
    var key;
    var bucketMag = this.discardedLogSamples.magnitude;
    for (key in this.discardedLogSamples.buckets) {
        var thrift_bucket = new crouton_thrift.SampleCount();
        thrift_bucket.oldest_micros = key * bucketMag;
        thrift_bucket.youngest_micros = thrift_bucket.oldest_micros + bucketMag;
        thrift_bucket.count = this.discardedLogSamples.buckets[key];
    }

    if (DEBUG) {
        console.assert(req.runtime.guid, "Runtimes require a GUID");
        console.assert(req.runtime.group_name, "Runtimes require a group_name");
    }

    // Convert the counters
    //
    // TODO: would be nice to reuse objects to avoid the dynamic allocations
    // make here. Saving that optimization for a later day.
    var thriftCounters = [];
    for (key in this.counters) {
        var value = this.counters[key];
        if (value > 0) {
            thriftCounters.push(new crouton_thrift.NamedCounter({
                Name  : key,
                Value : value,
            }));
        }
    }
    if (thriftCounters.length > 0) {
        req.counters = thriftCounters;
    }


    // TL;DR: writing a custom thrift.js wouldn't be such a bad idea.
    //
    // CAREFUL #1: the object passed to the callback as arg 1 is either the
    // response object in the case of success, or the error which glancing at
    // the JS library is either a string or a Thrift.TApplicationException (or
    // conceivably any kind of random exception that could be thrown during
    // processing).  In other words, it's probably best to check that res
    // against the expected instanceof type rather than checking for an
    // error type.  Sigh, why didn't they just use the more standard
    // function(err, res) convention??
    //
    // CAREFUL #2: even if the callback is eventually a no-op, it still needs
    // to be passed into the call as the presence of the callback is how
    // thrift determines if it should be a synchronous or asychronous call.
    //
    // Both the above problems could be solved with minor modifications to
    // thrift.js but then means commiting to a forked version.
    //

    // Release the in-memory objects once the request goes through.
    if (DEBUG) {
        console.assert(!this.flushActive, "Flush already active!");
    }
    this.flushActive = true;

    try {
        var originMicros = self.nowMicros();

        this.invokeReport(synchronous, req, function (err, res) {

            if (err && err.code == "DEPTH_ZERO_SELF_SIGNED_CERT") {
                if (_once(err.code)) {
                    _error("Error sending runtime instrumentation report:", err);
                    _error("Consider setting the runtime option 'certificate_verification' to false if you wish to ignore this error.");
                }
            }

            var destination_micros = self.nowMicros();
            self.flushActive = false;
            if (!err) {
                if (res) {
                    self.reportOldestMicros = self.nowMicros();
                    self.reportYoungestMicros = self.reportOldestMicros;

                    // Counters are for the report interval and thus all values
                    // are reset after the successful report.
                    for (var key in self.counters) {
                        self.counters[key] = 0;
                    }

                    self.emitSpansRecordedEvent(req.span_records, timeOffsetMicros, synchronous);

                    if (res.commands) {
                        for (var i = 0; i < res.commands.length; i++) {
                            var cmd = res.commands[i];
                            if (!cmd) {
                                continue;
                            }
                            if (cmd.disable) {
                                self.options({ enable : false });
                            }
                        }
                    }

                    if (res.timing && res.timing.receive_micros && res.timing.transmit_micros) {
                        self.clockState.addSample(originMicros, res.timing.receive_micros,
                                                  res.timing.transmit_micros, destination_micros);
                    }
                }
                releaseArrays(req.log_records, req.span_records);
                if (!sendLogsAndSpans) {
                    // Return a special error so that we can retry more
                    // quickly (since we didn't send any real data).
                    done(kClockStateNotReadyError);
                    return;
                }
            } else {
                self.counters.flush_errors++;
                if (sendLogsAndSpans) {
                    // Only restore if we tried to send something in the first place.
                    self.restoreRecordsAfterError(req.log_records, req.span_records);
                }
            }

            done(err);
        });

        // Clear the current buffers.  Note: this is not the same releasing the
        // objects themselves which is handled by releaseArrays().
        if (sendLogsAndSpans) {
            this.logs = [];
            this.spans = [];
        }
        this.discardedLogSamples.clear();

    } catch (e) {
        self.counters.flush_exceptions++;

        if (this.flushActive) {
            this.flushActive = false;
        }

        return done(e);
    }
};

// Emit an event about the spans that were just recorded -- currently for
// the HTML debugging overlay.
State.prototype.emitSpansRecordedEvent = function(spans, timeOffsetMicros, synchronous) {
    if (!spans || spans.length === 0) {
        return;
    }

    var self = this;

    // Only do this if there is an actual listener, since the cloning is
    // relatively expensive.
    if (!EventEmitterMin.listenerCount(self, "spans_recorded")) {
        return;
    }

    // The span data is *cloned* here rather than reused, as the span objects
    // come from a reusable memory pool.  Passing those objects directly via
    // the event puts the objects outside the memory pool's control.
    var eventSpans = [];
    for (var i = 0; i < spans.length; i++) {
        var record = spans[i];
        var join_ids = {};
        for (var j = 0; j < record.join_ids.length; j++) {
            var joinId = record.join_ids[j];
            join_ids[joinId.TraceKey] = joinId.Value;
        }
        eventSpans.push({
            // This is cheating a little bit, but bake in an
            // assumption about how the downstream service is going to
            // apply the correction and add timeOffsetMicros here.
            oldest_micros   : record.oldest_micros + timeOffsetMicros,
            youngest_micros : record.youngest_micros + timeOffsetMicros,
            span_name       : record.span_name,
            span_guid       : record.span_guid,
            join_ids        : join_ids,
        });
    }

    // Really we should wait until the server has indexed this
    // span, instead of just until we think the server has
    // received it, but this is better than nothing.
    if (synchronous) {
        self.emit("spans_recorded", eventSpans);
    } else {
        setTimeout(function() {
            self.emit("spans_recorded", eventSpans);
        }, 0);
    }
};

// Intended to be called when a pair of span and log record arrays fail to
// report properly.  This adds them back into the internal buffer while
// respecting the buffer limits.
//
// TODO: some form sampling rather than discard would be nice here.
State.prototype.restoreRecordsAfterError = function(logs, spans) {

    function prependOffset(buffer, records, max) {
        var space = max - buffer.length;
        if (space > 0) {
            return Math.max(0, records.length - space);
        } else {
            return records.length;
        }
    }

    var discard = false;
    var logOffset = prependOffset(this.logs, logs, this.bufferMaxLogRecords);
    var logDiscard = [];
    if (logOffset < logs.length) {
        logDiscard = logs.slice(0, logOffset);
        this.logs = logs.slice(logOffset).concat(this.logs);
        discard = true;
    }

    var spanOffset = prependOffset(this.spans, spans, this.bufferMaxSpanRecords);
    var spanDiscard = [];
    if (spanOffset < spans.length) {
        spanDiscard = spans.slice(0, spanOffset);
        this.spans = spans.slice(spanOffset).concat(this.spans);
        discard = true;
    }

    if (discard) {
        releaseArrays(logDiscard, spanDiscard);
    }
};

// TODO: the connection initialization needs to be de-coupled from the looping
// logic as it is conceivable that a client might want to manual control the
// flush calls.
//
// TODO: Overlapping with the prior todo, this needs to check if the loop has
// already been started.
//
State.prototype.ensureFlushBufferLoopStarted = function() {

    // Ignore redundant requests
    if (this.refreshLoopActive) {
        return;
    }

    if (DEBUG) {
        console.assert(this.client === null, "Client already initialized");
    }

    var self = this;
    this.refreshLoopActive = true;

    (function loop() {
        self.flushBuffer(false, function(err) {
            // Exponentially back off on the refresh loop if errors are occurring.
            // Ignore the first couple errors; then exponentially back off up to a limit.
            if (err && err != kClockStateNotReadyError) {
                self.flushErrorCount++;

                // The conditional below is conservative. There's no "spec" on what err
                // might be for depending on the platform and where the error occurs in
                // Thrift.
                //
                // Also, sadly on the browser side there's no way to distinguish any kind
                // of error so we have to swallow all browser errors to prevent the browser
                // console being polluted if the connection can't be made to our server.
                if (self.isNode && err.code != "ECONNREFUSED") {
                    self.flushNonConnectErrorCount++;
                    if (DEBUG) {
                        _error("flushBuffer error:", err);
                    }
                }
            } else {
                self.flushErrorCount = 0;
                self.flushNonConnectErrorCount = 0;
            }

            if (!self.shuttingDown) {
                if (err == kClockStateNotReadyError) {
                    // Set a short timeout for this case.
                    self.flushTimer = setTimeout(loop, kClockSamplingIntervalMs);
                } else {
                    var backOff = Math.pow(2, Math.max(0, Math.min(8, self.flushErrorCount - 2)));
                    self.flushTimer = setTimeout(loop, backOff * self.refreshIntervalMs);
                }

                // Make the timer effectively "weak" in the sense that a pending callback will
                // not keep the process alive.
                // https://nodejs.org/api/timers.html#timers_unref
                if (typeof self.flushTimer.unref === "function") {
                    self.flushTimer.unref();
                }

                // As a precaution against the Thrift connection being in a zombie state,
                // recreate the client object after repeated failures.
                var limit = kResetConnectionEveryNthFlushError;
                if ((self.flushNonConnectErrorCount % (limit + 1)) == limit) {
                    _error("flushBuffer error limit reached: recreating client connection.");
                    self.connectionOk = false;
                }

                // As a precaution against the data itself somehow preventing the RPC from
                // going through, discard the buffers if A LOT of failures have occurred in
                // a row.
                limit = kDiscardDataEveryNthFlushError;
                if ((self.flushNonConnectErrorCount % (limit + 1)) == limit) {
                    _error("flushBuffer error limit reached: discarding buffers.");
                    self.discardBuffers();
                }

            } else {
                clearTimeout(self.flushTimer);
            }
        });
    })();
};

State.prototype.ensureClockStateInitialized = function() {
    if (!this.clockState) {
        this.clockState = new ClockState(this.platform, this);
    }
};

// Create the Thrift client object if it has not yet been created or if the
// connection has been indicated as being not okay.  In the case that the connection
// is ok, this is a no-op.
State.prototype.ensureClientConnectionStarted = function() {
    var self = this;

    if (this.connectionOk) {
        return;
    }

    // TODO: encapsulate all platform differences in a separate package
    // and get rid of these isNode checks.
    if (!this.platform.isNode) {

        // Note this is implicitly using the JSON protocol -- not the binary protocol.
        // That's the default (and only supported JS protocol in !isNode).
        var serviceUrl = "https://" + this.serviceHost + ":" + this.servicePort + "/_rpc/v1/reports/json";
        var transport = new Thrift.Transport(serviceUrl);
        var protocol  = new Thrift.Protocol(transport);
        this.client   = new crouton_thrift.ReportingServiceClient(protocol);

        // The connection is only set for Node.js as a means to force a synchronous RPC
        this.connection = null;

    } else {

        var options = {
            transport   : Thrift.TBufferedTransport,
            protocol    : Thrift.TBinaryProtocol,
            path        : "/_rpc/v1/reports/binary",
            https       : true,
            nodeOptions : {},
        };
        if (!this.certificateVerification) {
            // https://github.com/request/request/issues/418
            options.nodeOptions.rejectUnauthorized = false;
            options.nodeOptions.strictSSL = false;
        }

        this.connection = Thrift.createHttpConnection(this.serviceHost, this.servicePort, options);
        this.client = Thrift.createHttpClient(crouton_thrift.ReportingServiceClient, this.connection);

        // Patch thrift with support for, well, the name says it...
        self.platform.patchHttpConnectionForSynchronousRPC(this.connection);

        this.connection.on("error", function(err) {
            // See createAsyncRPCAdapter for details
            if (self.thriftHttpErrorCallback) {
                self.thriftHttpErrorCallback(err);
            } else {
                _error("Unhandled Thrift error:", err);
            }
        });
    }

    // The reporting function might be non-null already if it has been
    // manually overridden, e.g. for unit testing.  Don't clobber that
    // value.
    if (!this.invokeReport) {
        this.invokeReport = this.createAsyncRPCAdapter(this.client.Report, crouton_thrift.ReportResponse);
    }

    this.connectionOk = true;
};

// RPC adapters since thrift has different calling conventions for the
// browser and node.js. (This is *almost* sufficiently annoying to consider
// forking thrift and fixing this particular piece of poor design.)
//
// This normalizes on a function (err, res) { ... } style callback.
//
// TODO: it might be nice to hide this in the platform-dependent code, not
// here.  But it is less indirection to just do it here.
//
State.prototype.createAsyncRPCAdapter = function(rpc, respType) {
    var self = this;

    var callbackAdapter;
    if (!this.platform.isNode) {

        // Browser case.
        return function(synchronous, req, callback) {
            if (DEBUG) {
               console.assert(self.auth && self.auth.access_token, "Expected access_token");
            }

            // Thrift fun fact: as well as having multiple workarounds for the various
            // ways thrift does and doesn't return errors, it's also necessary to check
            // if it throws an exception.
            try {
                if (!synchronous) {
                    rpc.call(self.client, self.auth, req, function(res) {
                        // The thrift browser-side convention here is frustrating. Valid
                        // responses and errors are overloaded into the same variable and
                        // need to be differentiated by a type-check.
                        if (!(res instanceof respType)) {
                            callback(res, null);
                        } else {
                            callback(null, res);
                        }
                    });
                } else {
                    // So "synchronous" has evolved into a misnomer at this point....
                    //
                    // The real intent is what might be called a "tail flush" -- a
                    // flush before the runtime exits that should not be interrupted.
                    // On the browser side, what this means is setting up an async,
                    // deferred URI-encoded report that *is* async, but will not be
                    // interrupted as a normal async XHR might be when the page is
                    // navigated away from.

                    var authJSON   = JSON.stringify(self.auth);
                    var reportJSON = JSON.stringify(req);

                    var url = "https://" +
                        self.serviceHost +
                        ":" + self.servicePort +
                        "/_rpc/v1/reports/uri_encoded" +
                        "?auth=" + encodeURIComponent(authJSON) +
                        "&report=" + encodeURIComponent(reportJSON);

                    var elem = document.createElement("script");
                    elem.async = true;
                    elem.defer = true;
                    elem.src = url;
                    elem.type = "text/javascript";
                    var hostElem = document.getElementsByTagName("head")[0];
                    if (hostElem) {
                        hostElem.appendChild(elem);
                    }

                    // Reference code for making a synchronous Thrift call.  Note that
                    // this would block (not surprisingly) which was problematic if the
                    // Traceguide server was bogged down as the client had to wait for
                    // the timeout.
                    /*var res = rpc.call(self.client, self.auth, req);
                    if (!(res instanceof respType)) {
                        return callback(res, null);
                    } else {
                        return callback(null, res);
                    }*/
                }
            } catch (e) {
                return callback(e, null);
            }
        };

    } else {

        // Node.js case.
        return function(synchronous, req, callback) {
            if (DEBUG) {
                console.assert(self.auth && self.auth.access_token, "Expected access_token");
            }

            // ARGH: the Thrift Node HttpConnection does NOT call the callback on an
            // HTTP error (e.g. ECONNREFUSED).
            //
            // The workaround is fragile and depends on how the surrounding code works.
            // We do have a hook into *any* http error via the Thrift.HttpConnection
            // object, which in a totally serial req/resp chain is sufficient to
            // correctly call the callback; however, in the case of parallel calls where
            // two requests go out, how do we know which request triggered the error?
            //
            // The cruntime code however is currently serial in sending its reports
            // (it postpones subsequent reports until it hears back about the last
            // one) -- so we can take advantage of the error coming in serially as
            // well.
            //
            // For what it's worth, this is not trivial to fix in the thrift code as
            // the HttpConnection class has no knowledge of the incoming request and
            // where it would report the error to.
            //
            // <rant target="thrift_dev">Always call the callback if you write a function
            // that takes callback, otherwise you make it impossible for callers to
            // properly manage control flow!!!</rant>
            //
            var errorHandlingCallback = function() {
                self.thriftHttpErrorCallback = null;
                callback.apply(this, arguments);
            };
            self.thriftHttpErrorCallback = errorHandlingCallback;

            // Patch #2 for synchronous RPCs.  This is not vanilla thrift.
            self.connection.synchronousRPC = synchronous;

            rpc.call(self.client, self.auth, req, errorHandlingCallback);
        };
    }
};

// Discard any unflushed data currently in the buffers
State.prototype.discardBuffers = function() {
    releaseArrays(this.logs, this.spans);
    this.logs = [];
    this.spans = [];
};

// Intended for internal use only for debugging.
State.prototype.resetObjectPools = function() {
    this.logs = [];
    this.spans = [];
    pool.logRecords.reset();
    pool.spanRecords.reset();
    pool.traceJoinIds.reset();
};

//===========================================================================//
// Logs
//===========================================================================//

// "Plain" in the sense that it goes straight to the original console.log,
// regardless of the cruntime settings.
State.prototype.plainLog = function() {
    return originalConsole_log.apply(originalConsole, arguments);
};

// "Plain" in the sense that it goes straight to the original console.warn,
// regardless of the cruntime settings.
State.prototype.plainWarn = function() {
    return originalConsole_warn.apply(originalConsole, arguments);
};

// "Plain" in the sense that it goes straight to the original console.error,
// regardless of the cruntime settings.
State.prototype.plainError = function() {
    return originalConsole_error.apply(originalConsole, arguments);
};

function coerceString(obj, fieldName) {
    var type = typeof obj[fieldName];
    if (type === "undefined") {
        return;
    } else if (type !== "string") {
        obj[fieldName] = ("" + obj[fieldName]);
    }
}

function isNumberOrUndefined(val) {
    var type = typeof val;
    return (type === "undefined" || type === "number");
}
function isBooleanOrUndefined(val) {
    var type = typeof val;
    return (type === "undefined" || type === "boolean");
}
function isStringOrUndefined(val) {
    var type = typeof val;
    return (type === "undefined" || type === "string");
}


State.prototype.rawLogRecord = function (fields) {
    if (DEBUG) {
        console.assert(this.runtime, "Runtime has not been initialized properly");
    }
    if (!this.enabled) {
        return;
    }

    this.cruntimeActive++;

    // Thrift throws an exception on type mismatches and it's difficult to
    // determine what record or field contained the mismatch, so coerce them
    // all here. This code has to be kept in sync with changes to crouton.thrift,
    // sigh...

    // Be nice and coerce these fields which may be coming from the customer and
    // it's easy to convert them correctly to string form:
    coerceString(fields,  "runtime_guid");
    coerceString(fields,  "span_guid");
    coerceString(fields,  "stable_name");
    coerceString(fields,  "message");
    coerceString(fields,  "filename");

    // Coerce the timestamp micros to an integer. For example, Safari's
    // performance API implementation sometimes returns decimal values.
    //
    // A couple notes:
    // - parseInt() is not used here as timestamp_micros is supposed to be
    //   set internally; we're just being a little paranoid about decimals
    //   possibly sneaking in.
    if (typeof fields.timestamp_micros == "number") {
        fields.timestamp_micros = Math.floor(fields.timestamp_micros);
    }

    // Be less forgiving and reject records with mismatches on the fields that
    // really should be of the right type:
    if (!isStringOrUndefined(fields.level)) {
        _error("Invalid log record: level", fields);
        this.cruntimeActive--;
        return;
    }
    if (!isNumberOrUndefined(fields.thread_id)) {
        _error("Invalid log record: thread_id", fields);
        this.cruntimeActive--;
        return;
    }
    if (!isNumberOrUndefined(fields.line_number)) {
        _error("Invalid log record: line_number", fields);
        this.cruntimeActive--;
        return;
    }
    if (!isStringOrUndefined(fields.payload_json)) {
        _error("Invalid log record: payload_json", fields);
        this.cruntimeActive--;
        return;
    }
    // TODO:
    // if (!isListOrUndefined(fields.stack_frames)) { ... }
    //
    if (!isBooleanOrUndefined(fields.error_flag)) {
        _error("Invalid log record: error_flag", fields);
        this.cruntimeActive--;
        return;
    }

    // Surround the payload processing in an exception handler since we
    // have little control over the contents of the payload and don't
    // want exception leaking into customer code.
    //
    // TODO: in the future, it's undoubtedly possible that the inspect/scrub
    // process could be optimized to do less work for the common case of small
    // payloads that require no scrubbing.
    //
    try {
        // Check if the payload was passed in as a direct JSON string.  This
        // isn't really an expected case -- but handle it just in case by
        // converting it to an object so the truncation / scrubbing that follows
        // is applied.
        if (fields.payload_json) {
            if (DEBUG) {
                console.assert(!this.payload, "Both payload and payload_json specified");
            }
            try {
                fields.payload = JSON.parse(fields.payload_json);
            } catch (_ignored) {}
            delete fields.payload_json;
        }

        // The payload is both truncated (to cap max data transfer) and scrubbed
        // (to remove personal information, passwords, etc.) before being
        // transmitted as a JSON string.
        if (fields.payload !== null && fields.payload !== undefined) {
            var payload = makeInspectable(fields.payload);

            // Can be null if console.* is overridden and called during cruntime
            // initialization.
            if (this.scrub) {
                payload = this.scrub.modify(payload);
            }
            fields.payload_json = JSON.stringify(payload);
            fields.payload = null;
        }
    } catch (payloadException) {
        if (DEBUG) {
            originalConsole.error("rl-cruntime exception: " + payloadException);
            originalConsole.error(payloadException.stack);
        }
        delete fields.payload;
        delete fields.payload_json;
    }

    var record = pool.logRecords.acquire(fields);
    if (!record.timestamp_micros) {
        record.timestamp_micros = this.nowMicros();
    }

    if (this.logs.length >= this.bufferMaxLogRecords) {
        // Treat this like a random sampling and replace a record at random.
        // This is not truly random in mathematical sense for a number of reasons,
        // but the assumption this is provides more useful information than
        // dropping all records once the max is hit.
        var index = Math.floor(this.logs.length * Math.random());
        var recordToDiscard = this.logs[index];

        // discardedLogSamples keeps a fixed size buffer of how many log
        // records were discarded for a given time-period. It's a lightweight way
        // of letting the server know something about the data that *wasn't*
        // reported without taking up a lot of report bandwidth.
        this.discardedLogSamples.add(recordToDiscard.timestamp_micros);

        pool.logRecords.release(recordToDiscard);
        this.logs[index] = record;
        this.counters.dropped_logs++;
    } else {
        this.logs.push(record);
    }

    this.cruntimeActive--;
};

State.prototype.logArgumentsWithSpanGUID = function(spanGUID, level, error, args) {
    if (!this.enabled) {
        return;
    }

    // Normalize the arguments object into an Array (it might be an Arguments object
    // which does not have the same interface).
    args = Array.prototype.slice.call(args);

    // Record the payload as well since the message will likely insert things like
    // "[Object]" rather than an inspectable representation (given the use of
    // join("") below and that most objects do not provide toString() overrides).
    //
    // Skip this step if the args are empty or all the args are strings though, as
    // the payload will be conveying no new information in that case.
    var payload = {};
    var hasPayload = false;     // Don't record empty payloads
    if (args.length > 0 && !allElementsAreStrings(args)) {
        payload.arguments = args;
        hasPayload = true;
    }

    // args.join(" ") can complain about "TypeError: Cannot convert object to primitive value"
    // when the unrolled loop below does not.
    var message;
    if (args.length) {
        // Paranoid try-catch. Electron still manages to generate a TypeError on what appears
        // to be a valid empty object. Prefer an empty message to letting an exception creep
        // into the customer code.
        try {
            message = "" + args[0];
            for (var i = 1; i < args.length; i++) {
                message += " " + args[i];
            }
        } catch (e) {
            // TODO: an internal-only log of this would condition would be nice. But how do
            // you log info about an object that is causing an error when you're trying to
            // log info about it?!
        }
    }

    var record = {
        error_flag  : error ? true : false,
        level       : level,
        filename    : this.defaultLogFilename(),
        message     : message,
        span_guid   : spanGUID,
    };
    if (hasPayload) {
        record.payload = payload;
    }
    this.rawLogRecord(record);
};

State.prototype.logArgumentsInfo = function(args, spanGUID, echo) {
    if (!this.enabled) {
        return;
    }
    if (echo === undefined) {
        echo = this.logToStdio;
    }

    // Ensure args is a true Array, not an Arguments object
    args = Array.prototype.slice.call(args);
    this.logArgumentsWithSpanGUID(spanGUID, "I", false, args);

    if (echo) {
        this.logger.info(args);
    }
};

State.prototype.logArgumentsWarn = function(args, spanGUID, echo) {
    if (!this.enabled) {
        return;
    }
    if (echo === undefined) {
        echo = this.logToStdio;
    }

    // Ensure args is a true Array, not an Arguments object
    args = Array.prototype.slice.call(args);
    this.logArgumentsWithSpanGUID(spanGUID, "W", false, args);

    if (echo) {
        this.logger.warn(args);
    }
};

State.prototype.logArgumentsError = function(args, spanGUID, echo) {
    if (!this.enabled) {
        return;
    }
    if (echo === undefined) {
        echo = this.logToStdio;
    }

    // Ensure args is a true Array, not an Arguments object
    args = Array.prototype.slice.call(args);
    this.logArgumentsWithSpanGUID(spanGUID, "E", true, args);

    if (echo) {
        this.logger.error(args);
    }
};

State.prototype.logArgumentsFatal = function (args, spanGUID, echo)  {
    if (!this.enabled) {
        return;
    }
    if (echo === undefined) {
        echo = this.logToStdio;
    }

    // Ensure args is a true Array, not an Arguments object
    args = Array.prototype.slice.call(args);
    this.logArgumentsWithSpanGUID(spanGUID, "F", true, args);

    if (echo) {
        this.logger.fatal(args);
    }
    this.processAbort();
};

State.prototype.logFormattedInfo = function(args, spanGUID, echo) {
    if (!this.enabled) {
        return;
    }
    throw new Error("NOT_YET_IMPLEMENTED");
};

State.prototype.logFormattedWarn = function(args, spanGUID, echo) {
    if (!this.enabled) {
        return;
    }
    throw new Error("NOT_YET_IMPLEMENTED");
};
State.prototype.logFormattedError = function(args, spanGUID, echo) {
    if (!this.enabled) {
        return;
    }
    throw new Error("NOT_YET_IMPLEMENTED");
};
State.prototype.logFormattedFatal = function(args, spanGUID) {
    if (!this.enabled) {
        return;
    }
    throw new Error("NOT_YET_IMPLEMENTED");
    //this.processAbort();
};

// Javascript doesn't really have a very solid standard on exception objects.
// The code below tries to extract as much information as possible based
// on the common cases of what information may be available.
//
State.prototype.logException = function (e, spanGUID) {
    if (!this.enabled) {
        return;
    }
    if (this.cruntimeActive) {
        return;
    }
    this.cruntimeActive++;

    var stackFrames = [];
    var lineNumber;
    var filename;

    // Attempt to extract the call stack from the string (correct for
    // at least Chrome 40, Node.js v0.12).  Note: hooking into V8's
    // prepareCallStack is a more direct way to get this information but
    // involves overrriding default behaviors of V8-only APIs - may want
    // to do that eventually, but for now simple string parsing is used.
    // http://stackoverflow.com/questions/11386492/accessing-line-number-in-v8-javascript-chrome-node-js
    //
    if (typeof e.stack === "string") {
        stackFrames = e.stack.split("\n");

        // Assume the string has the form below and try to extract info:
        //      Error: This is an error
        //          at Context.<anonymous> (/.../test/shared_unittests.js:202:30)
        //          ...
        if (stackFrames.length >= 2) {
            var top = stackFrames[1];
            var m;
            if (top.match(/^\s+at\s/) && (m = top.match(/\((.+):([0-9]+):([0-9]+)\)$/))) {
                filename = m[1];
                try {
                    lineNumber = parseInt(m[2]);
                } catch (ignored) {
                }
            }
        }
    }


    // Be as specific as we can for the standard exception types:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error
    //
    // This might be redundant as to what toString() will produce, but
    // that is unclear as what toString() produces is not standardized.
    var exceptionType = "Exception";
    if (e instanceof EvalError) {
        exceptionType = "EvalError";
    } else if (e instanceof RangeError) {
        exceptionType = "RangeError";
    } else if (e instanceof ReferenceError) {
        exceptionType = "ReferenceError";
    } else if (e instanceof SyntaxError) {
        exceptionType = "SyntaxError";
    } else if (e instanceof TypeError) {
        exceptionType = "TypeError";
    } else if (e instanceof URIError) {
        exceptionType = "URIError";
    } else if (e instanceof Error) {
        exceptionType = "Error";
    }

    this.rawLogRecord({
        span_guid       : spanGUID,       // May be undefined
        message         : e.toString(),
        error_flag      : true,
        level           : "E",
        filename        : filename,       // May be undefined
        line_number     : lineNumber,     // May be undefined
        payload         : {
            exceptionType : exceptionType,
        },
        stack_frames    : stackFrames,
    });

    this.cruntimeActive--;
};

// Create a detailed log record directly
State.prototype.logRecord = function(fields) {
    if (!this.enabled) {
        return;
    }
    return this.rawLogRecord(fields);
};

//===========================================================================//
// Events
//===========================================================================//

// Note: four arguments are always expected, but everything but "name" is
// allowed to be set to undefined.
//
State.prototype.logEventWithGUID = function(name, message, payload, spanGUID) {
    if (!this.enabled) {
        return;
    }

    this.rawLogRecord({
        stable_name     : name,
        message         : message,
        filename        : this.defaultLogFilename(),
        payload         : payload,
        span_guid       : spanGUID,
    });
};

// Valid call signatures:
//
// event(name)
// event(name, message)
// event(name, payload)
// event(name, message, payload)
//
State.prototype.logEvent = function(name, message, payload) {
    // The two-argument call signature is the only case that requires
    // parameter shuffling
    if (arguments.length === 2 && typeof message === "object") {
        payload = message;
        message = undefined;
    }
    return this.logEventWithGUID(name, message, payload, undefined);
};

State.prototype.eventWrap = function(name, f) {
    // We *don't* check this.enabled on the outer wrapper. The enabled setting
    // is potentially togglable at runtime. Conditionally creating the wrapper
    // would be very confusing as later re-enabling the cruntime would not
    // retroactively convert the input function into a wrapper equivalent.
    var self = this;
    return function() {
        if (this.enabled) {
            self.rawLogRecord({
                stable_name : name,
                filename    : self.defaultLogFilename(),
                payload     : {
                    arguments    : arguments,
                    stack_frames : platform.stackTrace(),
                },
            });
        }
        return f.apply(this, arguments);
    };
};

//===========================================================================//
// Spans
//===========================================================================//

State.prototype.setActiveSpanName = function(name) {
    if (!this.enabled) {
        return;
    }
    var span = this.getActiveSpan();
    if (!span) {
        // It's not an error to call this when there's no active span
        return;
    }
    span.name(name);
};

// Pretty simple: bank on the uniqueness of the "__cr_span" property
// name and ensure we use that property name consistently in the
// auto-instrumentation.
State.prototype.spanForObject = function (obj, spanHandle) {

    if (!this.enabled) {
        return span_handle.getNoOpHandle();
    }

    if (typeof obj !== "object") {
        return spanHandle || this.api;
    }

    // Handle the setter case
    if (arguments.length == 2) {

        if (span_handle.isSpanHandle(spanHandle)) {
            obj.__cr_span = spanHandle;
        }
        return spanHandle;

    } else {

        // Does this object have an explciit span handle?
        var handle = obj.__cr_span;
        if (span_handle.isSpanHandle(handle)) {
            return handle;
        }

        // Is there an active span handle?
        // Note: there are cases where the active span handle is not
        // necessarily what the customer would want. It is being assumed
        // it will be correct "often enough" that this is helpful behavior.
        var lastIndex = this.activeSpanOrJoinIDsStack.length - 1;
        if (lastIndex >= 0) {
            var spanOrJoinIds = this.activeSpanOrJoinIDsStack[lastIndex];
            if (span_handle.isSpanHandle(spanOrJoinIds)) {
                return spanOrJoinIds;
            }
        }
        if (this.verbose) {
            this.api.warn("No span handle for:", obj);
        }
        return span_handle.getNoOpHandle();
    }
};

// Sets the given span as active for the duration of the callthrough (then
// pops it from the active stack on call termination).
//
// This means that any calls further up in the callstack can access
// this span via a call to getActiveJoinIds() in order to inherit the join IDs.
//
// Note: a span being removed from the active span stack is not the same as
// end()-ing a span.  The caller is still responsible for calling end() on
// the given span.
//
// Note: `span` *is* allowed to be null to simplify things for the caller.
//
// Note/TODO: this really only active span stack really only works for
// synchronous calls or else the push() / pop() potentially becomes unbalanced.
// Being applicable only to synchronous functions is a serious limitation in
// JS.  It's worth considering if a sufficiently performant "set" of active
// spans could be maintained instead -- something that doesn't necessarily
// have to be push / popped in order, but does maintain knowledge of the
// most recent span.
//
State.prototype.setActiveSpanOrJoinIds = function(spanOrJoinIds, self, args, callthrough) {
    if (!this.enabled) {
        return callthrough.apply(self, args);
    }

    if (spanOrJoinIds) {
       this.activeSpanOrJoinIDsStack.push(spanOrJoinIds);
    }

    var ret;
    try {
        ret = callthrough.apply(self, args);
    } catch (e) {
        this.logException(e);
        throw e;
    } finally {
        if (spanOrJoinIds) {
            this.activeSpanOrJoinIDsStack.pop();
        }
    }
    return ret;
};

State.prototype.setActiveJoinIds = function(joinIds, callthrough) {

    if (this.verbose) {
        var filteredStack = this.platform.stackTrace(0, false);
        this.logRecord({
            stable_name : "cr/set_active_join_ids",
            message : JSON.stringify(joinIds) + " " + filteredStack[0],
            payload : {
                join_ids        : joinIds,
                active_join_ids : this.getActiveJoinIdsStack(),
            },
            stack_frames : this.platform.stackTrace(0, true),
        });
    }

    return this.setActiveSpanOrJoinIds(joinIds, null, [], callthrough);
};

State.prototype.setActiveSpan = function(span, self, args, callthrough) {

    if (this.verbose) {
        var filteredStack = this.platform.stackTrace(0, false);
        this.logRecord({
            stable_name : "cr/set_active_span",
            message : span.name() + " " + JSON.stringify(span.joinIds()) + " " + filteredStack[0],
            payload : {
                span_name       : span.name(),
                span_guid       : span.guid(),
                join_ids        : span.joinIds(),
                active_join_ids : this.getActiveJoinIdsStack(),
            },
            stack_frames : this.platform.stackTrace(0, true),
        });
    }

    return this.setActiveSpanOrJoinIds(span, self, args, callthrough);
};

State.prototype.getActiveSpan = function() {
    if (!this.enabled) {
        return null;
    }
    for (var i = this.activeSpanOrJoinIDsStack.length - 1; i >= 0; i--) {
        var span = this.activeSpanOrJoinIDsStack[i];
        if (span_handle.isSpanHandle(span) && span.valid()) {
            return span;
        }
    }
    return null;
};

// Return the active join IDs.
//
State.prototype.getActiveJoinIds = function() {
    if (!this.enabled) {
        return {};
    }

    for (var i = this.activeSpanOrJoinIDsStack.length - 1; i >= 0; i--) {
        var span = this.activeSpanOrJoinIDsStack[i];

        // SpanHandle objects need to be valid(); otherwise, assumed it's a
        // key-value joinID map and return it. It is possible for spans to
        // be ended before it is popped from the active stack and it produces
        // more accurate traces to account for that.  Also, checking here is
        // incrementally easier than having spans check
        if (!span_handle.isSpanHandle(span)) {
            return span;
        } else if (span.valid()) {
            return span.joinIds();
        }
    }
    return {};
};

// Internal utility: not intended to be exposed to the client API.
State.prototype.getActiveJoinIdsStack = function() {
    if (!this.enabled) {
        return [];
    }
    var stack = [];
    for (var i = 0; i < this.activeSpanOrJoinIDsStack.length; i++) {
        var span = this.activeSpanOrJoinIDsStack[i];
        if (!span_handle.isSpanHandle(span)) {
            stack.push(span);
        } else if (span.valid()) {
            stack.push(span.joinIds());
        }
    }
    return stack;
};

// Create the span record
State.prototype.rawSpanBegin = function (name, joinIdKeyValues) {
    if (!this.enabled) {
        return null;
    }

    var record = pool.spanRecords.acquire();
    record.span_guid     = platform.generateGUID();
    record.runtime_guid  = this.runtime.guid;
    record.span_name     = name;
    record.oldest_micros = this.nowMicros();
    record.youngest_micros = null;
    record.join_ids      = [];
    record.attributes    = [];

    this.mergeJoinIdMapIntoSpanRecord(record, joinIdKeyValues);

    if (this.verbose) {
        this.logRecord({
            stable_name : "cr/span_begin",
            message     : name,
            payload     : {
                name              : name,
                guid              : record.span_guid,
                explicit_join_ids : joinIdKeyValues,
                merged_join_ids   : record.join_ids,
                join_id_stack     : this.getActiveJoinIdsStack(),
            },
            stack_frames : this.platform.stackTrace(0, true),
        });
    }
    return record;
};

// Merge a JS map of key-value pairs into the span record's thrift join ids
// structures.  Use this method rather than doing this manually to ensure the
// object pooling is utilized.
//
State.prototype.mergeJoinIdMapIntoSpanRecord = function(spanRecord, joinIdMap) {
    if (!joinIdMap) {
        return;
    }

    // Scan for duplicate keys that need to be replaced.  This is a little awkward
    // since the thrift structure is a list of pairs, even though conceptually it
    // is a map with unique keys.
    var replacedKeys = {};
    for (var i = 0; i < spanRecord.join_ids.length; i++) {
        var existingKey = spanRecord.join_ids[i].TraceKey;
        if (!(existingKey in joinIdMap)) {
            continue;
        }
        var newValue = joinIdMap[existingKey];
        replacedKeys[existingKey] = true;
        spanRecord.join_ids[i].Value = String(newValue);
    }

    // Append any new keys
    for (var key in joinIdMap) {
        if (replacedKeys[key] === undefined) {
            var value = joinIdMap[key];
            if (value === undefined) {
                continue;
            }
            var joinId = pool.traceJoinIds.acquire();
            joinId.TraceKey = String(key);
            joinId.Value = String(value);
            spanRecord.join_ids.push(joinId);
        }
    }
};

// Returns null if the value should be skipped, otherwise a valid
// (but potentially empty) string.
function convertAttributeValue(value) {
    if (value === undefined || value === null) {
        return null;
    }
    var valueType = typeof value;
    if (valueType === "object") {
        try {
            value = JSON.stringify(value);
        } catch (e) {
            // Use the default conversion if JSON encoding fails
        }
    }
    return "" + value;
}

State.prototype.mergeAttributesIntoSpanRecord = function(spanRecord, attrMap) {
    if (!attrMap) {
        return;
    }

    // Scan for duplicate keys that need to be replaced.  This is a little awkward
    // since the thrift structure is a list of pairs, even though conceptually it
    // is a map with unique keys.
    var replacedKeys = {};
    for (var i = 0; i < spanRecord.attributes.length; i++) {
        var existingKey = spanRecord.attributes[i].Key;
        if (!(existingKey in attrMap)) {
            continue;
        }
        var newValue = convertAttributeValue(attrMap[existingKey]);
        if (newValue === null) {
            continue;
        }
        replacedKeys[existingKey] = true;
        spanRecord.attributes[i].Value = String(newValue);
    }

    // Append any new keys
    for (var key in attrMap) {
        if (key === null || key === undefined) {
            continue;
        }
        if (replacedKeys[key] === undefined) {
            var value = convertAttributeValue(attrMap[key]);
            if (value === null) {
                continue;
            }
            var pair = pool.keyValue.acquire();
            pair.Key = String(key);
            pair.Value = value;
            spanRecord.attributes.push(pair);
        }
    }
};

// Create the "handle" object for a given span record.
State.prototype.createSpanHandle = function (spanRecord) {
    return span_handle.acquire(this, spanRecord);
};

// Start a new span and return a handle interface for controlling the span.
//
// Valid signatures:
//
// var handle = cr.span("my_span_name");
// var handle = cr.span("my_span_name", { my_key : "my_value" });
// var result = cr.span("my_span_name", { my_key : "my_value" }, function(handle) {
//      return 42.0;
// });
//
// The third signature will automatically set the span as active for the
// duration of the callthrough; it does *not*, however, automatically call
// end() on the span.
//
// The newly created span with inherit any globally set join IDs as well as
// the join IDs of the nearest active span.
//
State.prototype.span = function (name, joinIdKeyValues, callthrough) {
    if (arguments.length === 2 && typeof joinIdKeyValues === "function") {
        callthrough = joinIdKeyValues;
        joinIdKeyValues = null;
    }

    var handle;

    if (!this.enabled) {
        handle = span_handle.getNoOpHandle();
        if (callthrough) {
            return callthrough(handle);
        }
        return handle;
    }

    // Always inherit the join IDs from the top-most active span.
    //
    // Note: merge into the activeSpan joinIds object to avoid modifying
    // the incoming argument -- less risk of unintended side-effects.
    var activeJoinIds = this.getActiveJoinIds();
    for (var key in joinIdKeyValues) {
        activeJoinIds[key] = joinIdKeyValues[key];
    }
    joinIdKeyValues = activeJoinIds;

    var record = this.rawSpanBegin(name, joinIdKeyValues);
    handle = this.createSpanHandle(record);
    if (callthrough) {
        return this.setActiveSpan(handle, null, [ handle ], callthrough);
    } else {
        return handle;
    }
};

// Wrap a synchronous function inside a span and return the wrapper function.
// A map of join ids can optionally be passed in as a second argument.  Note
// this will not work as expected with asynchronous functions that signal
// completion via an promise, event, or callback.
//
// function add(x, y) { return x + y; }
//
// var add = cr.spanWrap("add", add);
// var z = add(1, 2);
//
State.prototype.spanWrap = function (name, joinIdKeyValues, f) {
    var self = this;

    if (arguments.length == 2) {
        f = joinIdKeyValues;
        joinIdKeyValues = {};
    }

    return function() {
        var handle = self.span(name, joinIdKeyValues);
        var r;
        try {
            r = f.apply(this, arguments);
        } catch (e) {
            self.logException(e);
            throw e;
        } finally {
            handle.end();
        }
        return r;
    };
};

// Wrap a block of synchronous code inside a span.  The code will be executed
// immediately.  This is an alternative to explicitly surrounding the block
// of code with span creation and end() call that will automatically catch
// and log exceptions before rethrowing them.
//
// var z = 0;
// cr.spanSection("inner_computation", function() {
//      z = 4 * 2;
// });
//
State.prototype.spanSection = function (name, joinIdKeyValues, f) {
    if (arguments.length === 2) {
        f = joinIdKeyValues;
        joinIdKeyValues = {};
    }

    var handle = this.span(name, joinIdKeyValues);
    var r;
    try {
        r = f();
    } catch (e) {
        this.logException(e);
        throw e;
    } finally {
        handle.end();
    }
    return r;
};

// A manually created span.
State.prototype.spanManual = function (name, oldestMicros, youngestMicros) {
    if (!this.enabled) {
        return;
    }
    var record = this.rawSpanBegin(name);
    record.oldest_micros = oldestMicros;
    record.youngest_micros = youngestMicros;
    this.pushSpanRecord(record);
    return record.span_guid;
};

State.prototype.spanApplyImp = function (operation, joinIds, async, f, selfArg, callArgs) {

    var handle = this.span(operation, joinIds);

    // Assume the convention that the last argument is the "done" / "next" callback.
    if (async) {
        var done = callArgs[callArgs.length - 1];

        if (typeof done !== "function") {
            throw new Error("Invalid argument: expected last argument to be of type function");
        }

        callArgs[callArgs.length - 1] = function (err) {
            if (err) {
                handle.error("Error passed to callback", {
                    error : err,
                });
            }
            handle.log("Callback invoked", {
                "error"     : err,
                "arguments" : Array.prototype.slice.call(arguments),
            });

            handle.end();

            return done.apply(this, arguments);
        };
    } else {
        this.activeSpanOrJoinIDsStack.push(handle);
    }


    var ret;
    try {
        handle.log("Call invoked", {
            "this"      : selfArg,
            "arguments" : callArgs,
        });

        ret = f.apply(selfArg, callArgs);

    } catch (e) {
        this.logException(e);
        throw e;
    } finally {
        if (!async) {
            handle.end();
            this.activeSpanOrJoinIDsStack.pop();
        }
    }
    handle.log("Call returned", {
        "value" : ret,
    });
    return ret;
};

State.prototype.callSync = function (operation, joinIds, f, selfArg) {
    // Normalize arguments
    var callArgs;
    if (arguments.length < 2) {
        throw new Error("Invalid number of arguments");
    }
    if (typeof joinIds === "function") {
        callArgs = Array.prototype.slice.call(arguments, 3);
        selfArg = f;
        f = joinIds;
        joinIds = {};
    } else {
        callArgs = Array.prototype.slice.call(arguments, 4);
    }
    return this.spanApplyImp(operation, joinIds, false, f, selfArg, callArgs);
};

State.prototype.applySync = function (operation, joinIds, f, selfArg, callArgs) {
    // Normalize arguments
    if (arguments.length < 2) {
        throw new Error("Invalid number of arguments");
    }
    if (typeof joinIds === "function") {
        callArgs = selfArg;
        selfArg = f;
        f = joinIds;
        joinIds = {};
    }
    return this.spanApplyImp(operation, joinIds, false, f, selfArg, callArgs);
};

State.prototype.callAsync = function (operation, joinIds, f, selfArg) {
    // Normalize arguments
    var callArgs;
    if (arguments.length < 2) {
        throw new Error("Invalid number of arguments");
    }
    if (typeof joinIds === "function") {
        callArgs = Array.prototype.slice.call(arguments, 3);
        selfArg = f;
        f = joinIds;
        joinIds = {};
    } else {
        callArgs = Array.prototype.slice.call(arguments, 4);
    }
    return this.spanApplyImp(operation, joinIds, true, f, selfArg, callArgs);
};

State.prototype.applyAsync = function (operation, joinIds, f, selfArg, callArgs) {
    // Normalize arguments
    if (arguments.length < 2) {
        throw new Error("Invalid number of arguments");
    }
    if (typeof joinIds === "function") {
        callArgs = selfArg;
        selfArg = f;
        f = joinIds;
        joinIds = {};
    }
    return this.spanApplyImp(operation, joinIds, true, f, selfArg, callArgs);
};

// Add a span record to the internal buffer
State.prototype.pushSpanRecord = function(record) {
    // Merge in any global join ids -- do this at the end of the span as
    // this allows some spans that may have been automatically created
    // by the cruntime before the user set the global join ids to still
    // capture those global join ids.
    this.mergeJoinIdMapIntoSpanRecord(record, this.joinIds);

    // TODO: the Thrift fields on the record should be checked here to be
    // sure they're the right data type or else thrift will throw an
    // exception.

    if (this.spans.length >= this.bufferMaxSpanRecords) {
        // Treat this like a random sampling and replace a record at random.
        // This is not truly random in mathematical sense for a number of reasons,
        // but the assumption this is provides more useful information than
        // dropping all records once the max is hit.
        var index = Math.floor(this.spans.length * Math.random());
        releaseSpanRecord(this.spans[index]);
        this.spans[index] = record;
        this.counters.dropped_spans++;
    } else {
        this.spans.push(record);
    }
};

//===========================================================================//
// Stats
//===========================================================================//

// Primarily intended for debugging
State.prototype.reportBufferStats = function() {

    var runtimeAttrs = {};
    if (this.runtime.attrs) {
        for (var i = 0; i < this.runtime.attrs.length; i++) {
            var attr = this.runtime.attrs[i];
            runtimeAttrs[attr.Key] = attr.Value;
        }
    }

    return {
        // Basic configuration
        service_host        : this.serviceHost,
        service_port        : this.servicePort,
        runtime             : this.runtime,
        auth                : this.auth,

        // Runtime attributes
        runtime_attributes  : runtimeAttrs,
        statistics          : this.stats,

        // Current buffer stats
        queued_logs         : this.logs.length,
        queued_spans        : this.spans.length,
        max_log_records     : this.bufferMaxLogRecords,
        max_span_records    : this.bufferMaxSpanRecords,

        // Memory pooling stats
        log_records_allocated  : pool.logRecords.allocationCount,
        log_records_acquired   : pool.logRecords.acquireCount,
        log_records_released   : pool.logRecords.releaseCount,
        log_records_active     : pool.logRecords.allocationCount - pool.logRecords.freeList.length,

        span_records_allocated : pool.spanRecords.allocationCount,
        span_records_acquired  : pool.spanRecords.acquireCount,
        span_records_released  : pool.spanRecords.releaseCount,
        span_records_active    : pool.spanRecords.allocationCount - pool.spanRecords.freeList.length,

        join_ids_allocated     : pool.traceJoinIds.allocationCount,
        join_ids_acquired      : pool.traceJoinIds.acquireCount,
        join_ids_released      : pool.traceJoinIds.releaseCount,
        join_ids_active        : pool.traceJoinIds.allocationCount - pool.traceJoinIds.freeList.length,
    };
};

//===========================================================================//
// Exports
//===========================================================================//

module.exports = State;

},{"./clock_state.js":12,"./object_pool.js":13,"./span_handle.js":14,"./timestamp_samples.js":16,"node/packages/rl-eventemitter":17,"node/packages/rl-inspectable-object":18,"node/packages/rl-scrubber":20}],16:[function(require,module,exports){
// A fixed size buffer storing sample counts over a set of time ranges.
//
// This is specifically being used for record approximately how many log/span
// records were discarded over a given period of time.  This provides the
// server with some notion of what was *not* reported without consuming a
// lot of bandwidth.
//
// Arguments:
//
// maxBuckets   -- the maximum number of buckets to use regardless of total
//                 sample count
// granularity  -- the bucket size expressed as base-10 exponent, i.e. assuming
//                 microsecond samples, the initial granularity values map as:
//                 0 => microseconds
//                 3 => milliseconds
//                 6 => seconds
//
// The implementation itself has two primary objectives:
//
// (1) Use a fixed maximum amount of memory regardless of # of samples added
//     to the buffer.
// (2) Keep the implementation very simple so it's not adding any source of
//     code complexity and/or defects.
//
function TimestampSamples(maxBuckets, granularity) {
    this.maxBuckets   = maxBuckets;
    this.minMagnitude = Math.pow(10, granularity);

    // Note: this will initialize the rest of the object fields
    this.clear();
}

TimestampSamples.prototype.clear = function () {
    this.buckets     = {};
    this.bucketCount = 0;
    this.sampleCount = 0;
    this.magnitude   = this.minMagnitude;
};

TimestampSamples.prototype.add = function (timestamp) {
    var key = Math.floor(timestamp / this.magnitude);

    // There's an existing bucket for this sample, just add to
    // the total.
    if (this.buckets[key]) {
        this.buckets[key]++;
        this.sampleCount++;
        return;
    }

    // There's no existing bucket, but there's still capacity for
    // a new bucket to be created
    //
    // The min for a bucket is implicitly (key * magnitude).
    // The max for a bucket is implicitly (key * magnitude - 1).
    if (this.bucketCount < this.maxBuckets) {
        this.buckets[key] = 1;
        this.bucketCount++;
        this.sampleCount++;
        return;
    }

    //
    // Redistribute the buckets at 10x less granularity
    // then add().
    //
    var newBuckets = {};
    var newBucketCount = 0;
    for (var bucketKey in this.buckets) {
        var oldBucket = this.buckets[bucketKey];
        var newKey = Math.floor(bucketKey / 10);

        if (newBuckets[newKey]) {
            newBuckets[newKey] += oldBucket;
        } else {
            newBuckets[newKey] = oldBucket;
            newBucketCount ++;
        }
    }
    this.buckets = newBuckets;
    this.bucketCount = newBucketCount;
    this.magnitude *= 10;

    this.add(timestamp);
};

TimestampSamples.prototype.bucketAt = function(timestamp) {
    var key = Math.floor(timestamp / this.magnitude);
    var bucket = this.buckets[key];
    return {
        min   : key * this.magnitude,
        max   : key * this.magnitude - 1,
        count : bucket || 0,
    };
};

module.exports = TimestampSamples;

},{}],17:[function(require,module,exports){
//=============================================================================//
// EventEmitter
//
// Simple subset of http://nodejs.org/api/events.html
//=============================================================================//

function EventEmitter() {
    this._listeners = {};
}

EventEmitter.prototype.on = function (evt, listener) {
    console.assert(typeof listener === "function", "typeof listener incorrect: " + typeof listener);
    var arr = this._listeners[evt];
    if (!arr) {
        arr = this._listeners[evt] = [];
    }
    arr.push(listener);
};

EventEmitter.prototype.removeListener = function (evt, listener) {
    var updated = [];
    var existing = this._listeners[evt];
    if (!existing) {
        return;
    }
    for (var i = 0; i < existing.length; i++) {
        if (existing[i] != listener) {
            updated.push(existing[i]);
        }
    }
    this._listeners[evt] = updated;
};

EventEmitter.prototype.once = function (evt, listener) {
    var self = this;
    var wrapper = function() {
        listener.apply(self, arguments);
        self.removeListener(wrapper);
    };
    self.on(evt, wrapper);
};

EventEmitter.prototype.emit = function (evt) {
    var listeners = this._listeners[evt];
    if (!listeners) {
        return;
    }

    var args = Array.prototype.slice.call(arguments, 1);
    var list = this._listeners[evt];
    for (var i = 0; i < list.length; i++) {
        list[i].apply(this, args);
    }
};

EventEmitter.prototype.listeners = function (evt) {
    return this._listeners[evt];
};

EventEmitter.listenerCount = function(emitter, evt) {
    if (!emitter) {
        return 0;
    }
    var evtListeners = emitter.listeners(evt);
    if (!evtListeners) {
        return 0;
    }
    return evtListeners.length;
};

module.exports = EventEmitter;

},{}],18:[function(require,module,exports){
module.exports = require("./src/process.js");

},{"./src/process.js":19}],19:[function(require,module,exports){
//===========================================================================//
// Polyfill
//===========================================================================//

var isArray = (function() {
    if (Array.isArray) {
        return function(obj) {
            return Array.isArray(obj);
        }
    } else {
        return function(obj) {
            return Object.prototype.toString.call(obj) === "[object Array]";
        };
    }
})();

function isRegExp (obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
}

//===========================================================================//
// Processor
//===========================================================================//

function Processor(opts) {
    this.opts = opts || {};
    this.valueCount = 0;
    this.seen = [];

    this.limitValueCount    = this.opts.limit_value_count || 64;
    this.limitStringLength  = this.opts.limit_string_length || 512;
    this.limitArrayLength   = this.opts.limit_array_length || 24;
    this.arrayPeekLength    = this.opts.array_peek_length || 5;
}

Processor.prototype.process = function(value, opts) {

    // Reset the object state
    Processor.call(this, opts);

    var pair = this.processFastPath(value);
    if (pair.ok) {
        return pair.result;
    } else {
        return this.processSlowPath(value);
    }
};

// Check the is the object is "simple" enough to just rely on
// JSON.stringify. For brevity, the return value is the field
// count -- which will be greater than limit if it is not a
// simple value.
Processor.prototype.isSimple = function(value) {
    var self         = this;
    var limit        = self.limitValueCount;
    var exceedsLimit = limit + 1;
    var seen         = [];

    return isSimple(0, value, limit);

    // Recursive worker function
    function isSimple(count, value, limit) {

        var type = typeof value;

        // First check for circular references
        if (type === "object") {
            if (seen.indexOf(value) !== -1) {
                return exceedsLimit;
            }
            seen.push(value);
        }

        if (type === "string") {

            if (value.length > self.limitStringLength) {
                return exceedsLimit;
            }
            return count + 1;

        } else if (type === "number") {

            if (value === Infinity) {
                return exceedsLimit;
            } else if (value === -Infinity) {
                return exceedsLimit;
            } else if (!(value === value)) {  // <-- NaN returns false for any comparison
                return exceedsLimit;
            } else {
                return count + 1;
            }

        } else if (type === "function") {

            return exceedsLimit;

        } else if (type !== "object") {

            return count + 1;

        } else if (isArray(value)) {

            if (count + value.length > limit) {
                return exceedsLimit;
            }

            var keyCount = 0;
            for (var key in value) {
                keyCount++;
            }
            if (keyCount !== value.length) {
                return exceedsLimit;
            }

            for (var i = 0; i < value.length; i++) {
                count += isSimple(count, value[i], limit);
                if (count > limit) {
                    return exceedsLimit;
                }
            }
            return count;

        } else {

            var props = 0;
            for (var key in value) {
                if (value.hasOwnProperty(key)) {
                    props++;
                }
            }
            if (count + props > limit) {
                return exceedsLimit;
            }
            for (var key in value) {
                if (!value.hasOwnProperty(key)) {
                    continue;
                }
                count = isSimple(count, value[key], limit);
                if (count + props > limit) {
                    return exceedsLimit;
                }
            }
            return count;
        }
    }
}

// We make some unverified assumptions here, namely...
//
// (1) many user payloads will be small, simple, and directly
// JSON.stringify-able.
//
// (2) JSON.stringify() is implemented natively by the JS platform and will
// thus be efficient in terms of raw performance and, perhaps more
// importantly, minimal GC heap thrashing with temporaries.
//
// (3) Efficiency is more important than exact size constraints in the
// value conversion.
//
// Thus we assume it's overally quicker to always try stringifying the
// object -- and fallback to our more involved, processing, GC
// thrashing heavy simplficiation algorithm if and only if that native
// stringification failed.
Processor.prototype.processFastPath = function(value) {
    // Check if the object is clearly too large before attempting the native
    // stringification.
    if (this.isSimple(value) > this.limitValueCount) {
        return { ok : false };
    }

    var result;
    try {
        // Use a JSON round-trip to implicitly clone the object
        var json = JSON.stringify(value);
        return { ok : true, result : JSON.parse(json) };
    } catch (e) {
        return { ok : false };
    }
};

Processor.prototype.processSlowPath = function(value) {
    return this.postProcessValue(this.processValue(value));
};

Processor.prototype.truncateString = function(value) {
    var limit = this.limitStringLength;
    if (value.length > limit) {
        value = value.slice(0, limit - 1) + "…";
    }
    return value;
};

// Do a breadth-first expansion of the processed values.  The incoming value
// is always going to be either a primitive or a function to expand an
// object into it's primitives (and possibly its corresponding nested expansion
// functions).
Processor.prototype.postProcessValue = function(value) {

    // TODO: make this configurable
    var valueLimit = this.limitValueCount;
    var self = this;

    var root = {
        value : value,
    };
    var indices = [ "value" ];
    var parents = [ root ];

    // The value count is increment on addition to the queue
    this.valueCount++;

    while (parents.length) {
        var parent = parents.shift();
        var index  = indices.shift();
        var value  = parent[index];

        // If this is a non-primitive value expand it out
        if (typeof value === "function") {
            parent[index] = value = value();
        }

        if (typeof value === "object") {
            if (isArray(value)) {
                // Need to reset the array here since we still have the reference
                // to the parent object here.
                if (this.valueCount + value.length >= valueLimit) {
                    parent[index] = value = ["<truncated>"];
                    parents.push(value);
                    indices.push(0);
                } else {
                    for (var i = 0; i < value.length; i++) {
                        enqueue(i, value, true);
                    }
                }

            } else {
                // The object case is easier as we can delete the over-limit
                // fields in the enqueue function.
                for (var key in value) {
                    if (!value.hasOwnProperty(key)) {
                        continue;
                    }
                    enqueue(key, value, true);
                }
            }
        }
    }

    function enqueue (key, value, isObject) {
        if (self.valueCount < valueLimit) {
            parents.push(value);
            indices.push(key);
            self.valueCount++;
        } else {
            if (isObject) {
                delete value[key];
            }
        }

        if (self.valueCount === valueLimit) {
            parents.push(value);
            indices.push("…");
            value["…"] = "<truncated>";
            self.valueCount++;
        }
    }

    return root.value;
};


// Reduces a given JS value such that...
//
// If the value is a primitive, a value to use for the JSON payload is
// return.
//
// Else, return a function to expand the object one-level into a set of
// payloads primitives and futher expansion functions (for use in a
// breadth-first expansion).
//
// TODO: Node.js buffers for the node side of things
//
Processor.prototype.processValue = function(value) {

    var self = this;

    switch (typeof value) {

    case "undefined":
        return value;

    case "boolean":
        return value;

    case "string":
        return this.truncateString(value);

    case "number":
        if (value === Infinity) {
            return "<infinity>";
        } else if (value === -Infinity) {
            return "<-infinity>";
        } else if (!(value === value)) {  // <-- NaN returns false for any comparison
            return "<NaN>";
        } else {
            return value;
        }

    case "object":

        if (value === null) {

            return value;

        } else if (isRegExp(value)) {

            value = this.truncateString(value.toString());
            return "<regexp: " + value + ">";

        } else if (this.seen.indexOf(value) !== -1) {

            return "<circular>";
        }

        // At this point, this is not a primitive object -- record that we've
        // seen it to avoid circular references.
        this.seen.push(value);

        if (isArray(value)) {

            // TODO: make this limit an option
            if (value.length > this.limitArrayLength) {

                return function() {
                    // Note: slice() clamps out of range indexing, so there's no need to worry about
                    // arrayPeekLength and limitArrayLength being set irrationally.
                    return {
                        "$type" : "<truncated_array>",
                        length  : value.length,
                        head    : self.processValue(value.slice(0, self.arrayPeekLength)),
                        tail    : self.processValue(value.slice(value.length - self.arrayPeekLength)),
                    };
                }

            } else {

                return function() {

                    // Handle the unusual case of arrays that also have fields
                    // (e.g. jQuery objects).  Normalize these to an associative
                    // array with string keys only.
                    //
                    // Note: there doesn't seem to be a clean, cross-JS-variations way to detect
                    // these complex objects definitively.  Here the assumption made is if the object
                    // has a "length" property and the number of keys is equal to that length AND
                    // it has already passed the isArray() test, then it's most likely a normal
                    // array.  In the unlikely case that the object has a length properties that's
                    // equal to the number of keys BUT also has non-numeric keys, those non-numeric
                    // keys won't end up in the JSON: so be it.
                    //
                    var keyCount = 0;
                    for (var k in value) {
                        keyCount++;
                    }
                    if (keyCount == value.length) {
                        var a = new Array(value.length);
                        for (var i = 0; i < value.length; i++) {
                            a[i] = self.processValue(value[i]);
                        }
                        return a;
                    } else {
                        return self.cloneKeyValues(value);
                    }
                };
            }

        } else {

            return function() {
                return self.cloneKeyValues(value);
            };
        }

    case "function":
        return "<function>";

    // ECMAScript 6
    case "symbol":
        return "<symbol>";

    }
};

// Duplicate all the key-value pairs in an object, respecting the current
// processor options.
Processor.prototype.cloneKeyValues = function (value) {
    var obj = {};
    for (var key in value) {
        var elemType = (typeof value[key]);
        if (this.opts.exclude_functions && elemType === "function") {
            continue;
        }
        obj[key] = this.processValue(value[key]);
    }
    return obj;
}

// Use a global singleton to reduce the GC impact.
var gProcessor = new Processor();

//===========================================================================//
// Exports
//===========================================================================//

// Given an arbitary JS value return a new JS value that can stringified with
// JSON.stringify().
//
// - Circular references are removed.
// - The resulting object does not need to support round-tripping
// - Total size and max depth can be limited
//
module.exports = function(value, opts) {
    return gProcessor.process(value, opts);
};

},{}],20:[function(require,module,exports){
module.exports = require("./src/scrubber.js");

},{"./src/scrubber.js":23}],21:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var deepClone, deepDelete, deepExtend, deepFromFlat, deepKeys, deepMapValues, isPlainObject, mapKeys, mapValues, _;

_ = require('underscore');

module.exports = {
  deepKeys: deepKeys = function(obj) {
    if (!isPlainObject(obj)) {
      throw new Error("deepKeys must be called on an object, not '" + obj + "'");
    }
    return _.flatten(_.map(obj, function(v, k) {
      if (isPlainObject(v) && !_.isEmpty(v)) {
        return _.map(deepKeys(v), function(subkey) {
          return "" + k + "." + subkey;
        });
      } else {
        return [k];
      }
    }));
  },
  deepClone: deepClone = function(object) {
    var type, _i, _len, _ref;
    if (object == null) {
      return object;
    }
    _ref = [Date, Number, String, Boolean];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      type = _ref[_i];
      if (object instanceof type) {
        return new type(object);
      }
    }
    if (_(object).isArray()) {
      return _(object).map(deepClone);
    }
    if (!_(object).isObject()) {
      return object;
    }
    if (object.nodeType && _(object.cloneNode).isFunction()) {
      return object.cloneNode(true);
    }
    if (object.constructor !== {}.constructor) {
      return object;
    }
    return mapValues(object, deepClone);
  },
  deepHas: function(obj, keys) {
    var helper;
    helper = function(obj, keys) {
      if ((keys.length === 0) || (!_.isObject(obj))) {
        return false;
      } else if (keys.length === 1) {
        return _.first(keys) in obj;
      } else {
        return helper(obj[_.first(keys)], _.rest(keys));
      }
    };
    return helper(obj, _.isArray(keys) ? keys : keys.split('.'));
  },
  deepOmit: function(obj, keys) {
    var deepOmitOne;
    if (!isPlainObject(obj)) {
      throw new Error("deepOmit must be called on an object, not '" + obj + "'");
    }
    deepOmitOne = function(obj, key) {
      var helper;
      helper = function(obj, key_arr) {
        switch (false) {
          case !_.isEmpty(key_arr):
            return obj;
          case key_arr.length !== 1:
            return _.omit(obj, _.first(key_arr));
          case !!isPlainObject(obj[_.first(key_arr)]):
            return obj;
          default:
            return _.extend({}, obj, _.object([_.first(key_arr)], [helper(obj[_.first(key_arr)], _.rest(key_arr))]));
        }
      };
      return helper(obj, key.split('.'));
    };
    return _.reduce(keys, deepOmitOne, obj);
  },
  deepPick: (function() {
    var deepGet;
    deepGet = function(obj, key) {
      var helper;
      helper = function(obj, key_arr) {
        if (key_arr.length === 1) {
          return obj != null ? obj[_.first(key_arr)] : void 0;
        } else {
          return helper(obj[_.first(key_arr)], _.rest(key_arr));
        }
      };
      return helper(obj, key.split('.'));
    };
    return function(obj, keys) {
      var flat_new_obj;
      if (!isPlainObject(obj)) {
        throw new Error("deepPick must be called on an object, not '" + obj + "'");
      }
      flat_new_obj = _.reduce(keys, function(new_obj, key) {
        var val;
        val = deepGet(obj, key);
        if (val !== void 0) {
          new_obj[key] = val;
        }
        return new_obj;
      }, {});
      return deepFromFlat(flat_new_obj);
    };
  })(),
  deepDelete: deepDelete = function(obj, key) {
    if ((key == null) || (obj == null)) {
      return;
    }
    if (!_(key).isArray()) {
      key = key.split('.');
    }
    if (key.length === 1) {
      delete obj[key];
      return;
    }
    return deepDelete(obj[key[0]], key.slice(1, key.length));
  },
  deepExtend: deepExtend = function(obj, ext, mutate) {
    return _.reduce(ext, function(acc, val, key) {
      acc[key] = (key in obj) && isPlainObject(obj[key]) && isPlainObject(val) ? deepExtend(obj[key], val) : val;
      return acc;
    }, mutate ? obj : _.clone(obj));
  },
  isPlainObject: isPlainObject = function(value) {
    return (value != null ? value.constructor : void 0) === {}.constructor;
  },
  deepToFlat: function(obj) {
    var recurse, res;
    res = {};
    recurse = function(obj, current) {
      var key, newKey, value, _results;
      _results = [];
      for (key in obj) {
        value = obj[key];
        newKey = (current ? current + "." + key : key);
        if (value && isPlainObject(value)) {
          _results.push(recurse(value, newKey));
        } else {
          _results.push(res[newKey] = value);
        }
      }
      return _results;
    };
    recurse(obj);
    return res;
  },
  deepFromFlat: deepFromFlat = function(o) {
    var k, key, oo, part, parts, t;
    oo = {};
    t = void 0;
    parts = void 0;
    part = void 0;
    for (k in o) {
      t = oo;
      parts = k.split(".");
      key = parts.pop();
      while (parts.length) {
        part = parts.shift();
        t = t[part] = t[part] || {};
      }
      t[key] = o[k];
    }
    return oo;
  },
  mapValues: mapValues = function(obj, f_val) {
    if (!isPlainObject(obj)) {
      throw new Error("mapValues must be called on an object, not '" + obj + "'");
    }
    return _.object(_.keys(obj), _.map(obj, f_val));
  },
  deepMapValues: deepMapValues = function(obj, f) {
    if (!isPlainObject(obj)) {
      throw new Error("deepMapValues must be called on an object, not '" + obj + "'");
    }
    return mapValues(obj, function(v, k) {
      if (isPlainObject(v)) {
        return deepMapValues(v, function(subv, subk) {
          return f(subv, "" + k + "." + subk);
        });
      } else {
        return f(v, k);
      }
    });
  },
  mapKeys: mapKeys = function(obj, f_val) {
    if (!isPlainObject(obj)) {
      throw new Error("mapKeys must be called on an object, not '" + obj + "'");
    }
    return _.object(_.map(obj, function(v, k) {
      return f_val(k, v);
    }), _.values(obj));
  }
};

},{"underscore":22}],22:[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],23:[function(require,module,exports){
//===========================================================================//
// Dependencies
//===========================================================================//

var _  = require("underscore");
_.mixin(require("underscore.deep"));

var defaultConfig = {
    rules : [],
};

function identityFunc (value) {
    return value;
}

function _startsWith(str, prefix) {
    return str.substr(0, prefix.length) == prefix;
}

function _endsWith(str, prefix) {
    return str.substr(-prefix.length) == prefix;
}

//===========================================================================//
// Matching rules
//===========================================================================//

function keyMatchesRuleData(ruleData, fullKey, key) {
    var i;

    // Check key name matches against *this* field name
    if (ruleData.keySet[key]) {
        return true;
    }
    for (i = 0; i < ruleData.keyPrefixes.length; i++) {
        if (_startsWith(key, ruleData.keyPrefixes[i])) {
            return true;
        }
    }
    for (i = 0; i < ruleData.keySuffixes.length; i++) {
        if (_endsWith(key, ruleData.keySuffixes[i])) {
            return true;
        }
    }

    // Check path names against the full dot notation key path
    if (ruleData.pathSet[fullKey]) {
        return true;
    }
    for (i = 0; i < ruleData.pathPrefixes.length; i++) {
        if (_startsWith(key, ruleData.pathPrefixes[i])) {
            return true;
        }
    }
    for (i = 0; i < ruleData.pathSuffixes.length; i++) {
        if (_endsWith(key, ruleData.pathSuffixes[i])) {
            return true;
        }
    }

    // Check regular expresssion matches against the full key path
    for (i = 0; i < ruleData.regularExpressions.length; i++) {
        if (fullKey.match(ruleData.regularExpressions[i])) {
            return true;
        }
    }
    return false;
}

// Transform the rule config into a more runtime-useful form.
function buildRuleData(rule) {
    var ruleData = {
        keySet          : {},
        keyPrefixes     : [],
        keySuffixes     : [],

        pathSet         : {},
        pathPrefixes    : [],
        pathSuffixes    : [],

        regularExpressions : [],
    };

    var i;
    if (rule.keys) {
        for (i = 0; i < rule.keys.length; i++) {
            ruleData.keySet[rule.keys[i]] = true;
        }
    }
    ruleData.keyPrefixes = rule.key_prefixes || [];
    ruleData.keySuffixes = rule.key_suffixes || [];

    if (rule.paths) {
        for (i = 0; i < rule.paths.length; i++) {
            ruleData.pathSet[rule.paths[i]] = true;
        }
    }
    ruleData.pathPrefixes = rule.path_prefixes || [];
    ruleData.pathSuffixes = rule.path_suffixes || [];

    if (rule.regular_expressions) {
        for (i = 0; i < rule.regular_expressions.length; i++) {
            ruleData.regularExpressions.push(new RegExp(rule.regular_expressions[i]));
        }
    }
    return ruleData;
}

//===========================================================================//
// Implementation code
//===========================================================================//

function deepMapValuesOrDirectCall(obj, f) {
    if (_.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
            obj[i] = deepMapValuesOrDirectCall(obj[i], f);
        }
        return obj;
    } else if (_.isObject(obj)) {
        return _.deepMapValues(obj, f);
    } else {
        return f(obj);
    }
}

function deepRemoveKeys(obj, prefix, ruleData) {
    // Functions are objects in JS so both these checks are needed.
    if (!_.isObject(obj) || typeof obj === "function") {
        return;
    }
    for (var key in obj) {
        if (!obj.hasOwnProperty(key)) {
            continue;
        }
        if (keyMatchesRuleData(ruleData, prefix + key, key)) {
            delete obj[key];
            continue;
        }
        deepRemoveKeys(obj[key], prefix + key + ".", ruleData);
    }
}

function deepReplaceValues(obj, prefix, ruleData, value) {
    // Functions are objects in JS so both these checks are needed.
    if (!_.isObject(obj) || typeof obj === "function") {
        return;
    }
    for (var key in obj) {
        if (!obj.hasOwnProperty(key)) {
            continue;
        }      
        if (keyMatchesRuleData(ruleData, prefix + key, key)) {
            obj[key] = value;
            continue;
        }
        if (obj[key] !== key) {
            deepReplaceValues(obj[key], prefix + key + ".", ruleData, value);
        }
    }
}

function generateFunctionForRule(rule) {

    var ruleData = buildRuleData(rule);

    if (rule.match == "keys") {

        if (rule.op == "remove") {
            return function(value) {
                deepRemoveKeys(value, "", ruleData);
                return value;
            };

        } else if (rule.op == "replace") {
            return function(value) {
                deepReplaceValues(value, "", ruleData, rule.value);
                return value;
            };
        }

    } else if (rule.match == "url_query_string") {
        return function(value) {
            return deepMapValuesOrDirectCall(value, function(value) {
                if (!_.isString(value)) {
                    return value;
                }
                return processQueryStringValue(ruleData, value, rule.value);
            });
        };
    }

    // Hmmm...unhandled case
    throw new Error("Unsupported rule:\n" + JSON.stringify(rule, null, 4));
}

// Handle both full urls and just query strings:
//
//      "http://url.com/page?param=123&value=765"
//      "param=123&value=765"
//
// For brevity of the implementation, treat "replacement === undefined" as meaning
// *remove* the key and value. (Hey, it's not a public API!)
//
function processQueryStringValue(ruleData, value, replacementRaw) {

    // Early out if this clearly is not a URL query string
    if (value.indexOf("=") === -1) {
        return value;
    }

    var replacementValue;
    if (replacementRaw !== undefined) {
        replacementValue = encodeURIComponent(replacementRaw);
    }

    var leading = "";
    var parts = value.split("?");
    if (parts.length > 1) {
        leading = parts.shift() + "?";
    }

    var queryString = _.chain(parts.join("?").split("&"))
        .map(function(param) {
            var parts = param.split("=");
            var key, value;

            try {
                key = decodeURIComponent(parts[0]);
            } catch (_ignored) {
                return param;
            }
            value = parts.slice(1).join("=");

            // The key is always also the "full key" in a query string
            if (keyMatchesRuleData(ruleData, key, key)) {
                if (replacementValue === undefined) {
                    return "";
                } else {
                    return parts[0] + "=" + replacementValue;
                }
            } else {
                // No match, return the unmodified pair
                return param;
            }
        })
        .filter(function(v) { return v.length > 0; })
        .value()
        .join("&");

    return leading + queryString;
}

//===========================================================================//
// Scubber
//===========================================================================//

function Scrubber(cfg) {
    cfg = cfg || defaultConfig;

    this._config     = cfg;
    this._scrubFunc  = identityFunc;
    this._configure(cfg);
}

Scrubber.prototype._configure = function(cfg) {
    if (cfg.rules.length) {
        // Split any multiple match types into individual rules with a single
        // match type.
        var rules = [];
        _.each(cfg.rules, function (rule) {
            if (_.isArray(rule.match)) {
                _.each(rule.match, function (match) {
                    var newRule = _.clone(rule);
                    newRule.match = match;
                    rules.push(newRule);
                });
            } else {
                rules.push(rule);
            }
        });

        // TODO: this is presumably quite inefficient for large objects --
        // compose() is making this into N scans of the full object for
        // each rule; presumably walking the object once and checking each
        // rule at each step would be more efficient.
        var funcs = _.map(rules, generateFunctionForRule);
        this._scrubFunc = _.compose.apply(_, funcs);
    }
};

Scrubber.prototype.copy = function(value) {
    return this._scrubFunc(_.deepClone(value));
};

Scrubber.prototype.modify = function(value) {
    return this._scrubFunc(value);
};

//===========================================================================//
// Exported API
//===========================================================================//

var lib = {};

lib.make = function(cfg) {
    return new Scrubber(cfg);
};

module.exports = lib;

},{"underscore":22,"underscore.deep":21}]},{},[9])(9)
});
//# sourceMappingURL=data:application/json;base64,
})();